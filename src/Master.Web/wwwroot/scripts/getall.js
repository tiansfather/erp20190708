/* This file is automatically generated by ABP framework to use MVC Controllers from JavaScript. */

var abp = abp || {};
abp.services = abp.services || {};

// module 'app'
(function(){

  abp.services.app = abp.services.app || {};

  // controller 'file'
  (function(){

    abp.services.app.file = abp.services.app.file || {};

    // action 'uploadByContent'
    abp.services.app.file.uploadByContent = function(html, filePath, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'File/UploadByContent' + abp.utils.buildQueryString([{ name: 'filePath', value: filePath }]) + '',
        type: 'POST',
        data: JSON.stringify(html)
      }, ajaxParams));;
    };

    // action 'thumb'
    abp.services.app.file.thumb = function(fileid, w, h, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'File/Thumb/{fileId}' + abp.utils.buildQueryString([{ name: 'w', value: w }, { name: 'h', value: h }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.file.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/File/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.file.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/File/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.file.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/File/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.file.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/File/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.file.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/File/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.file.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/File/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.file.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/File/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.file.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/File/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.file.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/File/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'tokenAuth'
  (function(){

    abp.services.app.tokenAuth = abp.services.app.tokenAuth || {};

    // action 'simulateAuthenicate'
    abp.services.app.tokenAuth.simulateAuthenicate = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/SimulateAuthenicate' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'authenticate'
    abp.services.app.tokenAuth.authenticate = function(model, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/Authenticate' + abp.utils.buildQueryString([{ name: 'userName', value: model.userName }, { name: 'password', value: model.password }, { name: 'tenancyName', value: model.tenancyName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getExternalAuthenticationProviders'
    abp.services.app.tokenAuth.getExternalAuthenticationProviders = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/GetExternalAuthenticationProviders',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'externalAuthenticate'
    abp.services.app.tokenAuth.externalAuthenticate = function(model, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/ExternalAuthenticate' + abp.utils.buildQueryString([{ name: 'authProvider', value: model.authProvider }, { name: 'providerKey', value: model.providerKey }, { name: 'providerAccessCode', value: model.providerAccessCode }, { name: 'clientInfo', value: model.clientInfo }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'error'
    abp.services.app.tokenAuth.error = function(msg, detail, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/Error' + abp.utils.buildQueryString([{ name: 'msg', value: msg }, { name: 'detail', value: detail }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'success'
    abp.services.app.tokenAuth.success = function(msg, detail, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/TokenAuth/Success' + abp.utils.buildQueryString([{ name: 'msg', value: msg }, { name: 'detail', value: detail }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'qRCode'
  (function(){

    abp.services.app.qRCode = abp.services.app.qRCode || {};

    // action 'getQRCode'
    abp.services.app.qRCode.getQRCode = function(url, pixel, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/qrcode' + abp.utils.buildQueryString([{ name: 'url', value: url }, { name: 'pixel', value: pixel }]) + '',
        type: 'GET',
        dataType: null
      }, ajaxParams));;
    };

  })();

  // controller 'mES'
  (function(){

    abp.services.app.mES = abp.services.app.mES || {};

    // action 'index'
    abp.services.app.mES.index = function(page, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'MES/Index/' + page + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'receiptAudit'
    abp.services.app.mES.receiptAudit = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'MES/wechat/ReceiptAudit',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'profileEquipment'
    abp.services.app.mES.profileEquipment = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'MES/process/ProfileEquipment',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'profile'
    abp.services.app.mES.profile = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'MES/process/Profile',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'permission'
  (function(){

    abp.services.app.permission = abp.services.app.permission || {};

    // action 'getAllGrantedPermissions'
    abp.services.app.permission.getAllGrantedPermissions = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Permission/GetAllGrantedPermissions',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'assignAllMenuPermission'
    abp.services.app.permission.assignAllMenuPermission = function(type, permissionNames, id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Permission/AssignAllMenuPermission' + abp.utils.buildQueryString([{ name: 'type', value: type }, { name: 'id', value: id }]) + '',
        type: 'POST',
        data: JSON.stringify(permissionNames)
      }, ajaxParams));;
    };

    // action 'loadGrantedMenuPermissions'
    abp.services.app.permission.loadGrantedMenuPermissions = function(type, id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Permission/LoadGrantedMenuPermissions' + abp.utils.buildQueryString([{ name: 'type', value: type }, { name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'assignPermission'
    abp.services.app.permission.assignPermission = function(type, permissionName, id, isGranted, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Permission/AssignPermission' + abp.utils.buildQueryString([{ name: 'type', value: type }, { name: 'permissionName', value: permissionName }, { name: 'id', value: id }, { name: 'isGranted', value: isGranted }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getMenuDetailPermissions'
    abp.services.app.permission.getMenuDetailPermissions = function(type, id, menu, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Permission/GetMenuDetailPermissions' + abp.utils.buildQueryString([{ name: 'type', value: type }, { name: 'id', value: id }, { name: 'menu', value: menu }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delUserPermissions'
    abp.services.app.permission.delUserPermissions = function(userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Permission/DelUserPermissions' + abp.utils.buildQueryString([{ name: 'userId', value: userId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'grantAllPermissions'
    abp.services.app.permission.grantAllPermissions = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Permission/GrantAllPermissions' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'test'
  (function(){

    abp.services.app.test = abp.services.app.test || {};

    // action 'get'
    abp.services.app.test.get = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test/Get',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.test.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.test.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.test.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.test.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.test.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.test.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.test.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.test.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.test.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'user'
  (function(){

    abp.services.app.user = abp.services.app.user || {};

    // action 'formSubmit'
    abp.services.app.user.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.user.get = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/Get',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSimplePageResult'
    abp.services.app.user.getSimplePageResult = function(requestPageDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetSimplePageResult' + abp.utils.buildQueryString([{ name: 'page', value: requestPageDto.page }, { name: 'limit', value: requestPageDto.limit }, { name: 'where', value: requestPageDto.where }, { name: 'tableFilter', value: requestPageDto.tableFilter }, { name: 'filterField', value: requestPageDto.filterField }, { name: 'filterKey', value: requestPageDto.filterKey }, { name: 'filterColumns', value: requestPageDto.filterColumns }, { name: 'searchCondition', value: requestPageDto.searchCondition }, { name: 'filterSos', value: requestPageDto.filterSos }, { name: 'searchKeys', value: requestPageDto.searchKeys }, { name: 'keyword', value: requestPageDto.keyword }, { name: 'orderField', value: requestPageDto.orderField }, { name: 'orderType', value: requestPageDto.orderType }, { name: 'moduleKey', value: requestPageDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCountSummary'
    abp.services.app.user.getCountSummary = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetCountSummary',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changePassword'
    abp.services.app.user.changePassword = function(oriPassword, newPassword, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/ChangePassword' + abp.utils.buildQueryString([{ name: 'oriPassword', value: oriPassword }, { name: 'newPassword', value: newPassword }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getLoginProviders'
    abp.services.app.user.getLoginProviders = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetLoginProviders',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBindedLoginProviders'
    abp.services.app.user.getBindedLoginProviders = function(userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetBindedLoginProviders' + abp.utils.buildQueryString([{ name: 'userId', value: userId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'unBindLogin'
    abp.services.app.user.unBindLogin = function(provider, userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/UnBindLogin' + abp.utils.buildQueryString([{ name: 'provider', value: provider }, { name: 'userId', value: userId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'removeFromRole'
    abp.services.app.user.removeFromRole = function(userId, roleId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/RemoveFromRole' + abp.utils.buildQueryString([{ name: 'userId', value: userId }, { name: 'roleId', value: roleId }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'moveIntoRole'
    abp.services.app.user.moveIntoRole = function(userIds, roleId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/MoveIntoRole' + abp.utils.buildQueryString([{ name: 'roleId', value: roleId }]) + '',
        type: 'POST',
        data: JSON.stringify(userIds)
      }, ajaxParams));;
    };

    // action 'externalUserRegister'
    abp.services.app.user.externalUserRegister = function(externalUserRegisterDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/ExternalUserRegister',
        type: 'POST',
        data: JSON.stringify(externalUserRegisterDto)
      }, ajaxParams));;
    };

    // action 'verifyUser'
    abp.services.app.user.verifyUser = function(userIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/VerifyUser',
        type: 'POST',
        data: JSON.stringify(userIds)
      }, ajaxParams));;
    };

    // action 'getUserInfoByName'
    abp.services.app.user.getUserInfoByName = function(name, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUserInfoByName' + abp.utils.buildQueryString([{ name: 'name', value: name }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setSignature'
    abp.services.app.user.setSignature = function(signature, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/SetSignature' + abp.utils.buildQueryString([{ name: 'signature', value: signature }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getCurrentToken'
    abp.services.app.user.getCurrentToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetCurrentToken',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.user.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.user.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.user.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.user.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.user.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.user.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.user.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.user.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'unit'
  (function(){

    abp.services.app.unit = abp.services.app.unit || {};

    // action 'getAll'
    abp.services.app.unit.getAll = function(key, take, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/GetAll' + abp.utils.buildQueryString([{ name: 'key', value: key }, { name: 'take', value: take }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUnitNature'
    abp.services.app.unit.getAllByUnitNature = function(unitNature, key, take, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/GetAllByUnitNature' + abp.utils.buildQueryString([{ name: 'unitNature', value: unitNature }, { name: 'key', value: key }, { name: 'take', value: take }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBySupplierType'
    abp.services.app.unit.getAllBySupplierType = function(supplierType, key, take, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/GetAllBySupplierType' + abp.utils.buildQueryString([{ name: 'supplierType', value: supplierType }, { name: 'key', value: key }, { name: 'take', value: take }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.unit.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.unit.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.unit.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.unit.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.unit.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.unit.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.unit.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.unit.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.unit.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Unit/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'tenant'
  (function(){

    abp.services.app.tenant = abp.services.app.tenant || {};

    // action 'setTenantLogo'
    abp.services.app.tenant.setTenantLogo = function(logo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/SetTenantLogo' + abp.utils.buildQueryString([{ name: 'logo', value: logo }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setEdition'
    abp.services.app.tenant.setEdition = function(tenantId, editionId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/SetEdition' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'editionId', value: editionId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setActive'
    abp.services.app.tenant.setActive = function(tenantId, isActive, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/SetActive' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'isActive', value: isActive }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'initModule'
    abp.services.app.tenant.initModule = function(ids, addOn, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/InitModule' + abp.utils.buildQueryString([{ name: 'addOn', value: addOn }]) + '',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'initAdminRole'
    abp.services.app.tenant.initAdminRole = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/InitAdminRole',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'updateField'
    abp.services.app.tenant.updateField = function(tenantId, field, value, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/UpdateField' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'field', value: field }, { name: 'value', value: value }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.tenant.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.tenant.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.tenant.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.tenant.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.tenant.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.tenant.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.tenant.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.tenant.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.tenant.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'template'
  (function(){

    abp.services.app.template = abp.services.app.template || {};

    // action 'getTemplates'
    abp.services.app.template.getTemplates = function(templateType, tenantId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/GetTemplates' + abp.utils.buildQueryString([{ name: 'templateType', value: templateType }, { name: 'tenantId', value: tenantId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addTemplate'
    abp.services.app.template.addTemplate = function(templateDto, tenantId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/AddTemplate' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }]) + '',
        type: 'POST',
        data: JSON.stringify(templateDto)
      }, ajaxParams));;
    };

    // action 'delTemplate'
    abp.services.app.template.delTemplate = function(templateId, tenantId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/DelTemplate' + abp.utils.buildQueryString([{ name: 'templateId', value: templateId }, { name: 'tenantId', value: tenantId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateTemplate'
    abp.services.app.template.updateTemplate = function(templateDto, tenantId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/UpdateTemplate' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }]) + '',
        type: 'PUT',
        data: JSON.stringify(templateDto)
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.template.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.template.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.template.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.template.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.template.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.template.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.template.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.template.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.template.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Template/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'setting'
  (function(){

    abp.services.app.setting = abp.services.app.setting || {};

    // action 'updateSettingsForTenant'
    abp.services.app.setting.updateSettingsForTenant = function(settingDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Setting/UpdateSettingsForTenant',
        type: 'PUT',
        data: JSON.stringify(settingDtos)
      }, ajaxParams));;
    };

  })();

  // controller 'session'
  (function(){

    abp.services.app.session = abp.services.app.session || {};

    // action 'getCurrentLoginInformations'
    abp.services.app.session.getCurrentLoginInformations = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Session/GetCurrentLoginInformations',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'checkPassword'
    abp.services.app.session.checkPassword = function(password, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Session/CheckPassword' + abp.utils.buildQueryString([{ name: 'password', value: password }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'role'
  (function(){

    abp.services.app.role = abp.services.app.role || {};

    // action 'addRole'
    abp.services.app.role.addRole = function(name, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/AddRole' + abp.utils.buildQueryString([{ name: 'name', value: name }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'editRole'
    abp.services.app.role.editRole = function(id, name, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/EditRole' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'name', value: name }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.role.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.role.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTenantRoles'
    abp.services.app.role.getTenantRoles = function(tenantId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetTenantRoles' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.role.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.role.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.role.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.role.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.role.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.role.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.role.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'resource'
  (function(){

    abp.services.app.resource = abp.services.app.resource || {};

    // action 'getFlagInfosByType'
    abp.services.app.resource.getFlagInfosByType = function(type, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/GetFlagInfosByType' + abp.utils.buildQueryString([{ name: 'type', value: type }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setFlagInfosByType'
    abp.services.app.resource.setFlagInfosByType = function(type, flagInfos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/SetFlagInfosByType' + abp.utils.buildQueryString([{ name: 'type', value: type }]) + '',
        type: 'POST',
        data: JSON.stringify(flagInfos)
      }, ajaxParams));;
    };

    // action 'getBindedFlagNames'
    abp.services.app.resource.getBindedFlagNames = function(id, type, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/GetBindedFlagNames' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'type', value: type }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBindedFlags'
    abp.services.app.resource.getBindedFlags = function(id, type, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/GetBindedFlags' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'type', value: type }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setBindedFlags'
    abp.services.app.resource.setBindedFlags = function(id, type, flagNames, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/SetBindedFlags' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'type', value: type }]) + '',
        type: 'POST',
        data: JSON.stringify(flagNames)
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.resource.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.resource.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.resource.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.resource.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.resource.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.resource.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.resource.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.resource.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.resource.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Resource/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'project'
  (function(){

    abp.services.app.project = abp.services.app.project || {};

    // action 'getAll'
    abp.services.app.project.getAll = function(key, take, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Project/GetAll' + abp.utils.buildQueryString([{ name: 'key', value: key }, { name: 'take', value: take }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.project.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Project/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.project.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Project/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.project.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Project/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.project.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Project/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.project.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Project/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.project.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Project/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.project.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Project/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.project.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Project/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.project.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Project/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'organization'
  (function(){

    abp.services.app.organization = abp.services.app.organization || {};

    // action 'submitOrganization'
    abp.services.app.organization.submitOrganization = function(organizationDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/SubmitOrganization',
        type: 'POST',
        data: JSON.stringify(organizationDto)
      }, ajaxParams));;
    };

    // action 'getTreeJson'
    abp.services.app.organization.getTreeJson = function(parentId, maxLevel, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/GetTreeJson' + abp.utils.buildQueryString([{ name: 'parentId', value: parentId }, { name: 'maxLevel', value: maxLevel }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTenantTreeJson'
    abp.services.app.organization.getTenantTreeJson = function(tenantId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/GetTenantTreeJson' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'moveUserIntoOrganization'
    abp.services.app.organization.moveUserIntoOrganization = function(organizationId, userIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/MoveUserIntoOrganization' + abp.utils.buildQueryString([{ name: 'organizationId', value: organizationId }]) + '',
        type: 'POST',
        data: JSON.stringify(userIds)
      }, ajaxParams));;
    };

    // action 'moveUserOutOrganization'
    abp.services.app.organization.moveUserOutOrganization = function(userIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/MoveUserOutOrganization',
        type: 'POST',
        data: JSON.stringify(userIds)
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.organization.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.organization.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.organization.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.organization.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.organization.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.organization.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.organization.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.organization.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.organization.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Organization/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'notice'
  (function(){

    abp.services.app.notice = abp.services.app.notice || {};

    // action 'addNotice'
    abp.services.app.notice.addNotice = function(title, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/AddNotice' + abp.utils.buildQueryString([{ name: 'title', value: title }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setActive'
    abp.services.app.notice.setActive = function(id, isActive, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/SetActive' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'isActive', value: isActive }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateField'
    abp.services.app.notice.updateField = function(noticeId, field, value, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/UpdateField' + abp.utils.buildQueryString([{ name: 'noticeId', value: noticeId }, { name: 'field', value: field }, { name: 'value', value: value }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'getActiveNotices'
    abp.services.app.notice.getActiveNotices = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/GetActiveNotices',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.notice.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.notice.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.notice.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.notice.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.notice.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.notice.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.notice.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.notice.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.notice.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notice/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'moduleData'
  (function(){

    abp.services.app.moduleData = abp.services.app.moduleData || {};

    // action 'getPageResult'
    abp.services.app.moduleData.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleData/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.moduleData.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleData/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.moduleData.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleData/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.moduleData.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleData/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.moduleData.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleData/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.moduleData.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleData/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.moduleData.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleData/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.moduleData.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleData/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.moduleData.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleData/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'moduleInfo'
  (function(){

    abp.services.app.moduleInfo = abp.services.app.moduleInfo || {};

    // action 'addModuleInfo'
    abp.services.app.moduleInfo.addModuleInfo = function(moduleName, moduleKey, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/AddModuleInfo' + abp.utils.buildQueryString([{ name: 'moduleName', value: moduleName }, { name: 'moduleKey', value: moduleKey }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getModuleCountSummary'
    abp.services.app.moduleInfo.getModuleCountSummary = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/GetModuleCountSummary',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getColumnInfos'
    abp.services.app.moduleInfo.getColumnInfos = function(moduleKey, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/GetColumnInfos' + abp.utils.buildQueryString([{ name: 'moduleKey', value: moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBtnInfos'
    abp.services.app.moduleInfo.getBtnInfos = function(moduleKey, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/GetBtnInfos' + abp.utils.buildQueryString([{ name: 'moduleKey', value: moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateColumns'
    abp.services.app.moduleInfo.updateColumns = function(columns, moduleInfoId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/UpdateColumns' + abp.utils.buildQueryString([{ name: 'moduleInfoId', value: moduleInfoId }]) + '',
        type: 'PUT',
        data: JSON.stringify(columns)
      }, ajaxParams));;
    };

    // action 'updateBtns'
    abp.services.app.moduleInfo.updateBtns = function(btns, moduleInfoId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/UpdateBtns' + abp.utils.buildQueryString([{ name: 'moduleInfoId', value: moduleInfoId }]) + '',
        type: 'PUT',
        data: JSON.stringify(btns)
      }, ajaxParams));;
    };

    // action 'getColumnLayData'
    abp.services.app.moduleInfo.getColumnLayData = function(moduleKey, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/GetColumnLayData' + abp.utils.buildQueryString([{ name: 'moduleKey', value: moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.moduleInfo.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'initAllModuleInfo'
    abp.services.app.moduleInfo.initAllModuleInfo = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/InitAllModuleInfo',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'initModuleInfo'
    abp.services.app.moduleInfo.initModuleInfo = function(moduleInfoIds, hard, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/InitModuleInfo' + abp.utils.buildQueryString([{ name: 'hard', value: hard }]) + '',
        type: 'POST',
        data: JSON.stringify(moduleInfoIds)
      }, ajaxParams));;
    };

    // action 'setColumnFixed'
    abp.services.app.moduleInfo.setColumnFixed = function(moduleKey, columnKey, isFixed, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/SetColumnFixed' + abp.utils.buildQueryString([{ name: 'moduleKey', value: moduleKey }, { name: 'columnKey', value: columnKey }, { name: 'isFixed', value: isFixed }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setColumnWidth'
    abp.services.app.moduleInfo.setColumnWidth = function(moduleKey, columnKey, width, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/SetColumnWidth' + abp.utils.buildQueryString([{ name: 'moduleKey', value: moduleKey }, { name: 'columnKey', value: columnKey }, { name: 'width', value: width }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setColumnVisible'
    abp.services.app.moduleInfo.setColumnVisible = function(moduleKey, columnKey, visible, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/SetColumnVisible' + abp.utils.buildQueryString([{ name: 'moduleKey', value: moduleKey }, { name: 'columnKey', value: columnKey }, { name: 'visible', value: visible }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setColumnSort'
    abp.services.app.moduleInfo.setColumnSort = function(moduleKey, columnKeys, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/SetColumnSort' + abp.utils.buildQueryString([{ name: 'moduleKey', value: moduleKey }]) + '',
        type: 'POST',
        data: JSON.stringify(columnKeys)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.moduleInfo.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.moduleInfo.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.moduleInfo.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.moduleInfo.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.moduleInfo.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.moduleInfo.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.moduleInfo.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.moduleInfo.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ModuleInfo/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'menu'
  (function(){

    abp.services.app.menu = abp.services.app.menu || {};

    // action 'getFullTenancyMenuTreeJson'
    abp.services.app.menu.getFullTenancyMenuTreeJson = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Menu/GetFullTenancyMenuTreeJson',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMenuTreeJson'
    abp.services.app.menu.getMenuTreeJson = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Menu/GetMenuTreeJson',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDefinitionMenu'
    abp.services.app.menu.getDefinitionMenu = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Menu/GetDefinitionMenu',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserMenu'
    abp.services.app.menu.getUserMenu = function(userIdentifier, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Menu/GetUserMenu' + abp.utils.buildQueryString([{ name: 'tenantId', value: userIdentifier.tenantId }, { name: 'userId', value: userIdentifier.userId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDefaultMenusTreeJson'
    abp.services.app.menu.getDefaultMenusTreeJson = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Menu/GetDefaultMenusTreeJson',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'saveMenuSetting'
    abp.services.app.menu.saveMenuSetting = function(menuTreeDtoList, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Menu/SaveMenuSetting',
        type: 'POST',
        data: JSON.stringify(menuTreeDtoList)
      }, ajaxParams));;
    };

    // action 'getMenuItemDefinitionByMenuTreeDto'
    abp.services.app.menu.getMenuItemDefinitionByMenuTreeDto = function(menuTreeDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Menu/GetMenuItemDefinitionByMenuTreeDto' + abp.utils.buildQueryString([{ name: 'menuTreeDtos', value: menuTreeDtos }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'auditLog'
  (function(){

    abp.services.app.auditLog = abp.services.app.auditLog || {};

    // action 'getPageResult'
    abp.services.app.auditLog.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.auditLog.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.auditLog.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.auditLog.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.auditLog.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.auditLog.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.auditLog.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.auditLog.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.auditLog.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'systemLog'
  (function(){

    abp.services.app.systemLog = abp.services.app.systemLog || {};

    // action 'getLogs'
    abp.services.app.systemLog.getLogs = function(type, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SystemLog/GetLogs' + abp.utils.buildQueryString([{ name: 'type', value: type }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addClass'
    abp.services.app.systemLog.addClass = function(str, type, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SystemLog/AddClass' + abp.utils.buildQueryString([{ name: 'str', value: str }, { name: 'type', value: type }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getTipContent'
    abp.services.app.systemLog.getTipContent = function(url, type, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SystemLog/GetTipContent' + abp.utils.buildQueryString([{ name: 'url', value: url }, { name: 'type', value: type }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'userLoginAttempts'
  (function(){

    abp.services.app.userLoginAttempts = abp.services.app.userLoginAttempts || {};

    // action 'getPageResult'
    abp.services.app.userLoginAttempts.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLoginAttempts/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.userLoginAttempts.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLoginAttempts/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.userLoginAttempts.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLoginAttempts/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.userLoginAttempts.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLoginAttempts/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.userLoginAttempts.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLoginAttempts/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.userLoginAttempts.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLoginAttempts/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.userLoginAttempts.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLoginAttempts/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.userLoginAttempts.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLoginAttempts/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.userLoginAttempts.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLoginAttempts/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'language'
  (function(){

    abp.services.app.language = abp.services.app.language || {};

    // action 'addText'
    abp.services.app.language.addText = function(text, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/AddText' + abp.utils.buildQueryString([{ name: 'text', value: text }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateField'
    abp.services.app.language.updateField = function(id, field, value, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/UpdateField' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'field', value: field }, { name: 'value', value: value }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.app.language.get = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/Get',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.language.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.language.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.language.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.language.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.language.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.language.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.language.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.language.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.language.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'import'
  (function(){

    abp.services.app.import = abp.services.app.import || {};

    // action 'doImport'
    abp.services.app.import.doImport = function(importDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Import/DoImport',
        type: 'POST',
        data: JSON.stringify(importDto)
      }, ajaxParams));;
    };

    // action 'readFromExcel'
    abp.services.app.import.readFromExcel = function(fileId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Import/ReadFromExcel' + abp.utils.buildQueryString([{ name: 'fileId', value: fileId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'script'
  (function(){

    abp.services.app.script = abp.services.app.script || {};

    // action 'tryCompile'
    abp.services.app.script.tryCompile = function(scriptCompileDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Script/TryCompile',
        type: 'POST',
        data: JSON.stringify(scriptCompileDto)
      }, ajaxParams));;
    };

  })();

  // controller 'dictionary'
  (function(){

    abp.services.app.dictionary = abp.services.app.dictionary || {};

    // action 'getAllKeys'
    abp.services.app.dictionary.getAllKeys = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/GetAllKeysAsync',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'isInInnerDics'
    abp.services.app.dictionary.isInInnerDics = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/IsInInnerDics' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'addDictionary'
    abp.services.app.dictionary.addDictionary = function(name, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/AddDictionary' + abp.utils.buildQueryString([{ name: 'name', value: name }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateDictionary'
    abp.services.app.dictionary.updateDictionary = function(id, dicContent, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/UpdateDictionary' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'dicContent', value: dicContent }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.dictionary.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.dictionary.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.dictionary.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.dictionary.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.dictionary.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.dictionary.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.dictionary.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.dictionary.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.dictionary.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Dictionary/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'baseType'
  (function(){

    abp.services.app.baseType = abp.services.app.baseType || {};

    // action 'getTypesByDiscriminator'
    abp.services.app.baseType.getTypesByDiscriminator = function(discriminator, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/GetTypesByDiscriminator' + abp.utils.buildQueryString([{ name: 'discriminator', value: discriminator }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBaseType'
    abp.services.app.baseType.getBaseType = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/GetBaseType' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submit'
    abp.services.app.baseType.submit = function(baseTypeDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/Submit',
        type: 'POST',
        data: JSON.stringify(baseTypeDto)
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.baseType.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.baseType.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.baseType.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.baseType.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.baseType.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.baseType.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.baseType.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.baseType.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.baseType.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseType/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'baseTree'
  (function(){

    abp.services.app.baseTree = abp.services.app.baseTree || {};

    // action 'getTreeJson'
    abp.services.app.baseTree.getTreeJson = function(discriminator, parentId, maxLevel, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/GetTreeJson' + abp.utils.buildQueryString([{ name: 'discriminator', value: discriminator }, { name: 'parentId', value: parentId }, { name: 'maxLevel', value: maxLevel }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBaseTree'
    abp.services.app.baseTree.getBaseTree = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/GetBaseTree' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submit'
    abp.services.app.baseTree.submit = function(baseTreeDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/Submit',
        type: 'POST',
        data: JSON.stringify(baseTreeDto)
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.baseTree.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.baseTree.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.baseTree.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.baseTree.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.baseTree.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.baseTree.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.baseTree.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.baseTree.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.baseTree.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BaseTree/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'edition'
  (function(){

    abp.services.app.edition = abp.services.app.edition || {};

    // action 'getAll'
    abp.services.app.edition.getAll = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetAll',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addEdition'
    abp.services.app.edition.addEdition = function(text, key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/AddEdition' + abp.utils.buildQueryString([{ name: 'text', value: text }, { name: 'key', value: key }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateField'
    abp.services.app.edition.updateField = function(editionId, field, value, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/UpdateField' + abp.utils.buildQueryString([{ name: 'editionId', value: editionId }, { name: 'field', value: field }, { name: 'value', value: value }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.edition.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.edition.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.edition.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.edition.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.edition.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.edition.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.edition.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.edition.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.edition.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'feature'
  (function(){

    abp.services.app.feature = abp.services.app.feature || {};

    // action 'submitFeature'
    abp.services.app.feature.submitFeature = function(featureSubmitDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Feature/SubmitFeature',
        type: 'POST',
        data: JSON.stringify(featureSubmitDto)
      }, ajaxParams));;
    };

    // action 'resetTenantFeature'
    abp.services.app.feature.resetTenantFeature = function(tenantId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Feature/ResetTenantFeature' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'miniProgram'
  (function(){

    abp.services.app.miniProgram = abp.services.app.miniProgram || {};

    // action 'bindLogin'
    abp.services.app.miniProgram.bindLogin = function(encryptedUserId, openId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MiniProgram/BindLogin' + abp.utils.buildQueryString([{ name: 'encryptedUserId', value: encryptedUserId }, { name: 'openId', value: openId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getUserInfo'
    abp.services.app.miniProgram.getUserInfo = function(openId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MiniProgram/GetUserInfo' + abp.utils.buildQueryString([{ name: 'openId', value: openId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'weiXin'
  (function(){

    abp.services.app.weiXin = abp.services.app.weiXin || {};

    // action 'login'
    abp.services.app.weiXin.login = function(guid, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WeiXin/Login' + abp.utils.buildQueryString([{ name: 'guid', value: guid }]) + '',
        type: 'POST',
        dataType: null
      }, ajaxParams));;
    };

    // action 'getLoginInfo'
    abp.services.app.weiXin.getLoginInfo = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WeiXin/GetLoginInfo',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'bindLogin'
    abp.services.app.weiXin.bindLogin = function(encryptedUserId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WeiXin/BindLogin' + abp.utils.buildQueryString([{ name: 'encryptedUserId', value: encryptedUserId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getBindLoginInfo'
    abp.services.app.weiXin.getBindLoginInfo = function(provider, encryptedUserId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WeiXin/GetBindLoginInfo' + abp.utils.buildQueryString([{ name: 'provider', value: provider }, { name: 'encryptedUserId', value: encryptedUserId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setUploadInfo'
    abp.services.app.weiXin.setUploadInfo = function(guid, uploadResult, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WeiXin/SetUploadInfo' + abp.utils.buildQueryString([{ name: 'guid', value: guid }]) + '',
        type: 'POST',
        dataType: null,
        data: JSON.stringify(uploadResult)
      }, ajaxParams));;
    };

    // action 'getUploadInfo'
    abp.services.app.weiXin.getUploadInfo = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WeiXin/GetUploadInfo',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setUserInfo'
    abp.services.app.weiXin.setUserInfo = function(guid, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WeiXin/SetUserInfo' + abp.utils.buildQueryString([{ name: 'guid', value: guid }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getUserInfo'
    abp.services.app.weiXin.getUserInfo = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WeiXin/GetUserInfo',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'downLoadMedia'
    abp.services.app.weiXin.downLoadMedia = function(mediaIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WeiXin/DownLoadMedia',
        type: 'POST',
        data: JSON.stringify(mediaIds)
      }, ajaxParams));;
    };

  })();

  // controller 'processTask'
  (function(){

    abp.services.app.processTask = abp.services.app.processTask || {};

    // action 'get'
    abp.services.app.processTask.get = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/Get',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIdByTryId'
    abp.services.app.processTask.getIdByTryId = function(tryid, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetIdByTryId' + abp.utils.buildQueryString([{ name: 'tryid', value: tryid }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'testCount'
    abp.services.app.processTask.testCount = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/TestCount',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'testCount2'
    abp.services.app.processTask.testCount2 = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/TestCount2',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getSummaryCount'
    abp.services.app.processTask.getSummaryCount = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetSummaryCount',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSummaryFee'
    abp.services.app.processTask.getSummaryFee = function(unitId, poster, reason, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetSummaryFee' + abp.utils.buildQueryString([{ name: 'unitId', value: unitId }, { name: 'poster', value: poster }, { name: 'reason', value: reason }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.processTask.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.processTask.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitProcessTask'
    abp.services.app.processTask.submitProcessTask = function(processTaskDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SubmitProcessTask',
        type: 'POST',
        data: JSON.stringify(processTaskDto)
      }, ajaxParams));;
    };

    // action 'submitSimpleProcessType'
    abp.services.app.processTask.submitSimpleProcessType = function(simpleSubmitTaskDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SubmitSimpleProcessType',
        type: 'POST',
        data: JSON.stringify(simpleSubmitTaskDto)
      }, ajaxParams));;
    };

    // action 'sendToMES'
    abp.services.app.processTask.sendToMES = function(taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SendToMES' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'receiveMESTaskInfoForm'
    abp.services.app.processTask.receiveMESTaskInfoForm = function(taskId, receiveMESTaskReportType, reportTime, message, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/ReceiveMESTaskInfoForm' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }, { name: 'receiveMESTaskReportType', value: receiveMESTaskReportType }, { name: 'reportTime', value: reportTime }, { name: 'message', value: message }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'receiveMESTaskInfo'
    abp.services.app.processTask.receiveMESTaskInfo = function(receiveMESTaskDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/ReceiveMESTaskInfo',
        type: 'POST',
        data: JSON.stringify(receiveMESTaskDto)
      }, ajaxParams));;
    };

    // action 'getReportTaskInfoById'
    abp.services.app.processTask.getReportTaskInfoById = function(taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetReportTaskInfoById' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'report'
    abp.services.app.processTask.report = function(processTaskReportDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/Report',
        type: 'POST',
        data: JSON.stringify(processTaskReportDto)
      }, ajaxParams));;
    };

    // action 'getTaskReportInfo'
    abp.services.app.processTask.getTaskReportInfo = function(taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetTaskReportInfo' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProcessTaskReports'
    abp.services.app.processTask.getProcessTaskReports = function(processTaskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetProcessTaskReports' + abp.utils.buildQueryString([{ name: 'processTaskId', value: processTaskId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTaskInfoById'
    abp.services.app.processTask.getTaskInfoById = function(taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetTaskInfoById' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'attachFile'
    abp.services.app.processTask.attachFile = function(taskId, uploadFileInfo, rel, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/AttachFile' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }, { name: 'rel', value: rel }]) + '',
        type: 'POST',
        data: JSON.stringify(uploadFileInfo)
      }, ajaxParams));;
    };

    // action 'attachFiles'
    abp.services.app.processTask.attachFiles = function(taskId, uploadFileInfos, rel, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/AttachFiles' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }, { name: 'rel', value: rel }]) + '',
        type: 'POST',
        data: JSON.stringify(uploadFileInfos)
      }, ajaxParams));;
    };

    // action 'removeAttachFile'
    abp.services.app.processTask.removeAttachFile = function(taskId, filePath, rel, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/RemoveAttachFile' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }, { name: 'filePath', value: filePath }, { name: 'rel', value: rel }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'attachSheetFile'
    abp.services.app.processTask.attachSheetFile = function(taskId, filePath, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/AttachSheetFile' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }, { name: 'filePath', value: filePath }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getHistoryPerson'
    abp.services.app.processTask.getHistoryPerson = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetHistoryPerson' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLastTaskPersons'
    abp.services.app.processTask.getLastTaskPersons = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetLastTaskPersons',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProjectChargerByProjectId'
    abp.services.app.processTask.getProjectChargerByProjectId = function(projectId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetProjectChargerByProjectId' + abp.utils.buildQueryString([{ name: 'projectId', value: projectId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCraftsManByPartId'
    abp.services.app.processTask.getCraftsManByPartId = function(partId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetCraftsManByPartId' + abp.utils.buildQueryString([{ name: 'partId', value: partId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitTaskDate'
    abp.services.app.processTask.submitTaskDate = function(updateTaskDateDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SubmitTaskDate',
        type: 'POST',
        data: JSON.stringify(updateTaskDateDto)
      }, ajaxParams));;
    };

    // action 'getProcessTaskInfosByIds'
    abp.services.app.processTask.getProcessTaskInfosByIds = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetProcessTaskInfosByIds' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'checkFee'
    abp.services.app.processTask.checkFee = function(checkFeeDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/CheckFee',
        type: 'POST',
        data: JSON.stringify(checkFeeDtos)
      }, ajaxParams));;
    };

    // action 'addFee'
    abp.services.app.processTask.addFee = function(feeDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/AddFee',
        type: 'POST',
        data: JSON.stringify(feeDtos)
      }, ajaxParams));;
    };

    // action 'addAccountingResult'
    abp.services.app.processTask.addAccountingResult = function(accountingDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/AddAccountingResult',
        type: 'POST',
        data: JSON.stringify(accountingDto)
      }, ajaxParams));;
    };

    // action 'saveBase64'
    abp.services.app.processTask.saveBase64 = function(accountingDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SaveBase64',
        type: 'POST',
        data: JSON.stringify(accountingDto)
      }, ajaxParams));;
    };

    // action 'getIsAccountingConfirmed'
    abp.services.app.processTask.getIsAccountingConfirmed = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetIsAccountingConfirmed' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'sendFee'
    abp.services.app.processTask.sendFee = function(feeDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SendFee',
        type: 'POST',
        data: JSON.stringify(feeDtos)
      }, ajaxParams));;
    };

    // action 'verifyFee'
    abp.services.app.processTask.verifyFee = function(feeDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/VerifyFee',
        type: 'POST',
        data: JSON.stringify(feeDtos)
      }, ajaxParams));;
    };

    // action 'reActualHours'
    abp.services.app.processTask.reActualHours = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/ReActualHours',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'reSort'
    abp.services.app.processTask.reSort = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/ReSort',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'getBaseSearchData'
    abp.services.app.processTask.getBaseSearchData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetBaseSearchData',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getModelName'
    abp.services.app.processTask.getModelName = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetModelName',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'arrangeTaskToEquipment'
    abp.services.app.processTask.arrangeTaskToEquipment = function(tasksInfo, equipmentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/ArrangeTaskToEquipment' + abp.utils.buildQueryString([{ name: 'equipmentId', value: equipmentId }]) + '',
        type: 'POST',
        data: JSON.stringify(tasksInfo)
      }, ajaxParams));;
    };

    // action 'unArrangeTasks'
    abp.services.app.processTask.unArrangeTasks = function(taskIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/UnArrangeTasks',
        type: 'POST',
        data: JSON.stringify(taskIds)
      }, ajaxParams));;
    };

    // action 'submitFeeFromProcessor'
    abp.services.app.processTask.submitFeeFromProcessor = function(submitFeeFromProcessorDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SubmitFeeFromProcessor',
        type: 'POST',
        data: JSON.stringify(submitFeeFromProcessorDto)
      }, ajaxParams));;
    };

    // action 'setTaskStatus'
    abp.services.app.processTask.setTaskStatus = function(taskId, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SetTaskStatus' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }, { name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setTasksStatus'
    abp.services.app.processTask.setTasksStatus = function(taskIds, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SetTasksStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(taskIds)
      }, ajaxParams));;
    };

    // action 'getAvailableTemplates'
    abp.services.app.processTask.getAvailableTemplates = function(taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetAvailableTemplates' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setTaskTemplate'
    abp.services.app.processTask.setTaskTemplate = function(taskId, templateId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SetTaskTemplate' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }, { name: 'templateId', value: templateId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getTaskTemplateData'
    abp.services.app.processTask.getTaskTemplateData = function(taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetTaskTemplateData' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitTaskTemplateData'
    abp.services.app.processTask.submitTaskTemplateData = function(taskId, templateData, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SubmitTaskTemplateData' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'POST',
        data: JSON.stringify(templateData)
      }, ajaxParams));;
    };

    // action 'revertCanDan'
    abp.services.app.processTask.revertCanDan = function(taskIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/RevertCanDan',
        type: 'POST',
        data: JSON.stringify(taskIds)
      }, ajaxParams));;
    };

    // action 'sendToUnit'
    abp.services.app.processTask.sendToUnit = function(taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SendToUnit' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'saveTaskToHtmlAndSendUnit'
    abp.services.app.processTask.saveTaskToHtmlAndSendUnit = function(html, taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SaveTaskToHtmlAndSendUnit' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'POST',
        data: JSON.stringify(html)
      }, ajaxParams));;
    };

    // action 'saveTaskToHtml'
    abp.services.app.processTask.saveTaskToHtml = function(html, taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SaveTaskToHtml' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'POST',
        data: JSON.stringify(html)
      }, ajaxParams));;
    };

    // action 'getTaskPicSrc'
    abp.services.app.processTask.getTaskPicSrc = function(taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetTaskPicSrc' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'saveSearchData'
    abp.services.app.processTask.saveSearchData = function(searchDataSave, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SaveSearchData',
        type: 'POST',
        data: JSON.stringify(searchDataSave)
      }, ajaxParams));;
    };

    // action 'delSearchData'
    abp.services.app.processTask.delSearchData = function(searchDataSave, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/DelSearchData',
        type: 'POST',
        data: JSON.stringify(searchDataSave)
      }, ajaxParams));;
    };

    // action 'rNameSearchData'
    abp.services.app.processTask.rNameSearchData = function(searchDataSave, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/RNameSearchData',
        type: 'POST',
        data: JSON.stringify(searchDataSave)
      }, ajaxParams));;
    };

    // action 'getSearchData'
    abp.services.app.processTask.getSearchData = function(name, key, pagename, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetSearchData' + abp.utils.buildQueryString([{ name: 'name', value: name }, { name: 'key', value: key }, { name: 'pagename', value: pagename }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSearchDataSave'
    abp.services.app.processTask.getSearchDataSave = function(key, pagename, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetSearchDataSave' + abp.utils.buildQueryString([{ name: 'key', value: key }, { name: 'pagename', value: pagename }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.processTask.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.processTask.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.processTask.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.processTask.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.processTask.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.processTask.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.processTask.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTask/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'bom'
  (function(){

    abp.services.app.bom = abp.services.app.bom || {};

    // action 'getPageResult'
    abp.services.app.bom.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBomTree'
    abp.services.app.bom.getBomTree = function(id, name, level, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/GetBomTree' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'name', value: name }, { name: 'level', value: level }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'moveTreeNode'
    abp.services.app.bom.moveTreeNode = function(nodeId, targetNodeId, moveType, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/MoveTreeNode' + abp.utils.buildQueryString([{ name: 'nodeId', value: nodeId }, { name: 'targetNodeId', value: targetNodeId }, { name: 'moveType', value: moveType }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getBomInfo'
    abp.services.app.bom.getBomInfo = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/GetBomInfo' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitBomInfo'
    abp.services.app.bom.submitBomInfo = function(partDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/SubmitBomInfo',
        type: 'POST',
        data: JSON.stringify(partDto)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.bom.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.bom.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.bom.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.bom.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.bom.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.bom.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.bom.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.bom.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Bom/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'cloudEquipment'
  (function(){

    abp.services.app.cloudEquipment = abp.services.app.cloudEquipment || {};

    // action 'getPageResult'
    abp.services.app.cloudEquipment.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CloudEquipment/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFreeEquipmentByKey'
    abp.services.app.cloudEquipment.getFreeEquipmentByKey = function(keyword, page, limit, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CloudEquipment/GetFreeEquipmentByKey' + abp.utils.buildQueryString([{ name: 'keyword', value: keyword }, { name: 'page', value: page }, { name: 'limit', value: limit }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCompanyByKey'
    abp.services.app.cloudEquipment.getCompanyByKey = function(keyword, page, limit, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CloudEquipment/GetCompanyByKey' + abp.utils.buildQueryString([{ name: 'keyword', value: keyword }, { name: 'page', value: page }, { name: 'limit', value: limit }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'findByCompanyName'
    abp.services.app.cloudEquipment.findByCompanyName = function(companyName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CloudEquipment/FindByCompanyName' + abp.utils.buildQueryString([{ name: 'companyName', value: companyName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'mESProjectCustomer'
  (function(){

    abp.services.app.mESProjectCustomer = abp.services.app.mESProjectCustomer || {};

    // action 'getPageResult'
    abp.services.app.mESProjectCustomer.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProjectPartInfos'
    abp.services.app.mESProjectCustomer.getProjectPartInfos = function(projectId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/GetProjectPartInfos' + abp.utils.buildQueryString([{ name: 'projectId', value: projectId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPartReportInfos'
    abp.services.app.mESProjectCustomer.getPartReportInfos = function(partId, where, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/GetPartReportInfos' + abp.utils.buildQueryString([{ name: 'partId', value: partId }, { name: 'where', value: where }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getManufactures'
    abp.services.app.mESProjectCustomer.getManufactures = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/GetManufactures',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.mESProjectCustomer.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.mESProjectCustomer.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.mESProjectCustomer.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.mESProjectCustomer.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.mESProjectCustomer.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.mESProjectCustomer.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.mESProjectCustomer.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.mESProjectCustomer.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProjectCustomer/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'processTaskCustomer'
  (function(){

    abp.services.app.processTaskCustomer = abp.services.app.processTaskCustomer || {};

    // action 'getPageResult'
    abp.services.app.processTaskCustomer.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskCustomer/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.processTaskCustomer.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskCustomer/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.processTaskCustomer.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskCustomer/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.processTaskCustomer.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskCustomer/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.processTaskCustomer.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskCustomer/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.processTaskCustomer.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskCustomer/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.processTaskCustomer.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskCustomer/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.processTaskCustomer.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskCustomer/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.processTaskCustomer.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskCustomer/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'equipment'
  (function(){

    abp.services.app.equipment = abp.services.app.equipment || {};

    // action 'bindUser'
    abp.services.app.equipment.bindUser = function(equipmentIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/BindUser',
        type: 'POST',
        data: JSON.stringify(equipmentIds)
      }, ajaxParams));;
    };

    // action 'unbindUser'
    abp.services.app.equipment.unbindUser = function(equipmentIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/UnbindUser',
        type: 'POST',
        data: JSON.stringify(equipmentIds)
      }, ajaxParams));;
    };

    // action 'getByOperatorId'
    abp.services.app.equipment.getByOperatorId = function(operatorId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetByOperatorId' + abp.utils.buildQueryString([{ name: 'operatorId', value: operatorId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEquipmentInfosByProcessTypeName'
    abp.services.app.equipment.getEquipmentInfosByProcessTypeName = function(processTypeName, unitId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetEquipmentInfosByProcessTypeName' + abp.utils.buildQueryString([{ name: 'processTypeName', value: processTypeName }, { name: 'unitId', value: unitId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEquipmentInfos'
    abp.services.app.equipment.getEquipmentInfos = function(processTypeId, unitId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetEquipmentInfos' + abp.utils.buildQueryString([{ name: 'processTypeId', value: processTypeId }, { name: 'unitId', value: unitId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEquipmentInfo'
    abp.services.app.equipment.getEquipmentInfo = function(equipmentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetEquipmentInfo' + abp.utils.buildQueryString([{ name: 'equipmentId', value: equipmentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEquipmentProcessInfos'
    abp.services.app.equipment.getEquipmentProcessInfos = function(equipmentProcessInfoSearchDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetEquipmentProcessInfos' + abp.utils.buildQueryString([{ name: 'processTypeId', value: equipmentProcessInfoSearchDto.processTypeId }, { name: 'unitId', value: equipmentProcessInfoSearchDto.unitId }, { name: 'keyword', value: equipmentProcessInfoSearchDto.keyword }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAvailableArrangeDate'
    abp.services.app.equipment.getAvailableArrangeDate = function(equipmentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetAvailableArrangeDate' + abp.utils.buildQueryString([{ name: 'equipmentId', value: equipmentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'syncEquipmentFromMES'
    abp.services.app.equipment.syncEquipmentFromMES = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/SyncEquipmentFromMES',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getUnFinishedTasks'
    abp.services.app.equipment.getUnFinishedTasks = function(equipmentId, taskNumber, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetUnFinishedTasks' + abp.utils.buildQueryString([{ name: 'equipmentId', value: equipmentId }, { name: 'taskNumber', value: taskNumber }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEquipmentsUnFinishedTasks'
    abp.services.app.equipment.getEquipmentsUnFinishedTasks = function(equipmentIds, taskNumber, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetEquipmentsUnFinishedTasks' + abp.utils.buildQueryString([{ name: 'equipmentIds', value: equipmentIds }, { name: 'taskNumber', value: taskNumber }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFinishedTasks'
    abp.services.app.equipment.getFinishedTasks = function(equipmentId, taskNumber, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetFinishedTasks' + abp.utils.buildQueryString([{ name: 'equipmentId', value: equipmentId }, { name: 'taskNumber', value: taskNumber }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAbnormalReportTasks'
    abp.services.app.equipment.getAbnormalReportTasks = function(equipmentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetAbnormalReportTasks' + abp.utils.buildQueryString([{ name: 'equipmentId', value: equipmentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'reorderUnFinishedTasks'
    abp.services.app.equipment.reorderUnFinishedTasks = function(taskIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/ReorderUnFinishedTasks',
        type: 'POST',
        data: JSON.stringify(taskIds)
      }, ajaxParams));;
    };

    // action 'getEquipmentTimeLineTasks'
    abp.services.app.equipment.getEquipmentTimeLineTasks = function(from, to, processTypeId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetEquipmentTimeLineTasks' + abp.utils.buildQueryString([{ name: 'from', value: from }, { name: 'to', value: to }, { name: 'processTypeId', value: processTypeId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitTimeLineData'
    abp.services.app.equipment.submitTimeLineData = function(equipmentTimeLineSubmitDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/SubmitTimeLineData',
        type: 'POST',
        data: JSON.stringify(equipmentTimeLineSubmitDto)
      }, ajaxParams));;
    };

    // action 'getEquipmentLoads'
    abp.services.app.equipment.getEquipmentLoads = function(equipmentIds, startDate, endDate, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetEquipmentLoads' + abp.utils.buildQueryString([{ name: 'equipmentIds', value: equipmentIds }, { name: 'startDate', value: startDate }, { name: 'endDate', value: endDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCameraShowUrl'
    abp.services.app.equipment.getCameraShowUrl = function(equipmentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetCameraShowUrl' + abp.utils.buildQueryString([{ name: 'equipmentId', value: equipmentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.equipment.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.equipment.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.equipment.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.equipment.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.equipment.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.equipment.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.equipment.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.equipment.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.equipment.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Equipment/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'equipmentOperatorHistory'
  (function(){

    abp.services.app.equipmentOperatorHistory = abp.services.app.equipmentOperatorHistory || {};

    // action 'getPageResult'
    abp.services.app.equipmentOperatorHistory.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EquipmentOperatorHistory/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.equipmentOperatorHistory.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EquipmentOperatorHistory/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.equipmentOperatorHistory.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EquipmentOperatorHistory/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.equipmentOperatorHistory.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EquipmentOperatorHistory/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.equipmentOperatorHistory.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EquipmentOperatorHistory/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.equipmentOperatorHistory.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EquipmentOperatorHistory/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.equipmentOperatorHistory.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EquipmentOperatorHistory/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.equipmentOperatorHistory.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EquipmentOperatorHistory/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.equipmentOperatorHistory.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EquipmentOperatorHistory/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'mESEdition'
  (function(){

    abp.services.app.mESEdition = abp.services.app.mESEdition || {};

    // action 'getAll'
    abp.services.app.mESEdition.getAll = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/GetAll',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addEdition'
    abp.services.app.mESEdition.addEdition = function(text, key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/AddEdition' + abp.utils.buildQueryString([{ name: 'text', value: text }, { name: 'key', value: key }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateField'
    abp.services.app.mESEdition.updateField = function(editionId, field, value, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/UpdateField' + abp.utils.buildQueryString([{ name: 'editionId', value: editionId }, { name: 'field', value: field }, { name: 'value', value: value }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.mESEdition.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.mESEdition.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.mESEdition.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.mESEdition.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.mESEdition.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.mESEdition.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.mESEdition.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.mESEdition.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.mESEdition.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESEdition/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'mesProcessor'
  (function(){

    abp.services.app.mesProcessor = abp.services.app.mesProcessor || {};

    // action 'getPageResult'
    abp.services.app.mesProcessor.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesProcessor/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.mesProcessor.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesProcessor/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.mesProcessor.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesProcessor/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.mesProcessor.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesProcessor/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.mesProcessor.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesProcessor/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.mesProcessor.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesProcessor/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.mesProcessor.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesProcessor/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.mesProcessor.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesProcessor/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.mesProcessor.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesProcessor/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'mESProject'
  (function(){

    abp.services.app.mESProject = abp.services.app.mESProject || {};

    // action 'getProjectChargers'
    abp.services.app.mESProject.getProjectChargers = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetProjectChargers',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProcessSummaryPageResult'
    abp.services.app.mESProject.getProcessSummaryPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetProcessSummaryPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProjectInfo'
    abp.services.app.mESProject.getProjectInfo = function(projectSN, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetProjectInfo' + abp.utils.buildQueryString([{ name: 'projectSN', value: projectSN }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBaseSearchData'
    abp.services.app.mESProject.getBaseSearchData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetBaseSearchData',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getModelName'
    abp.services.app.mESProject.getModelName = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetModelName',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'syncProcessSchedule'
    abp.services.app.mESProject.syncProcessSchedule = function(projectId, renew, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/SyncProcessSchedule' + abp.utils.buildQueryString([{ name: 'projectId', value: projectId }, { name: 'renew', value: renew }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.mESProject.getAll = function(key, take, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetAll' + abp.utils.buildQueryString([{ name: 'key', value: key }, { name: 'take', value: take }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.mESProject.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.mESProject.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.mESProject.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.mESProject.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.mESProject.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.mESProject.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.mESProject.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.mESProject.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.mESProject.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESProject/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'mESShipping'
  (function(){

    abp.services.app.mESShipping = abp.services.app.mESShipping || {};

    // action 'getPageResult'
    abp.services.app.mESShipping.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESShipping/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.mESShipping.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESShipping/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.mESShipping.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESShipping/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.mESShipping.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESShipping/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.mESShipping.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESShipping/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.mESShipping.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESShipping/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.mESShipping.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESShipping/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.mESShipping.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESShipping/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.mESShipping.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESShipping/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'mesTenancy'
  (function(){

    abp.services.app.mesTenancy = abp.services.app.mesTenancy || {};

    // action 'test'
    abp.services.app.mesTenancy.test = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/Test' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.mesTenancy.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllTenantWithLocation'
    abp.services.app.mesTenancy.getAllTenantWithLocation = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/GetAllTenantWithLocation',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setLocation'
    abp.services.app.mesTenancy.setLocation = function(tenantId, lng, lat, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/SetLocation' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'lng', value: lng }, { name: 'lat', value: lat }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'bindTenantToUnitName'
    abp.services.app.mesTenancy.bindTenantToUnitName = function(tenantId, inviter, unitName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/BindTenantToUnitName' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'inviter', value: inviter }, { name: 'unitName', value: unitName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'claimUnit'
    abp.services.app.mesTenancy.claimUnit = function(inviter, unitName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/ClaimUnit' + abp.utils.buildQueryString([{ name: 'inviter', value: inviter }, { name: 'unitName', value: unitName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'register'
    abp.services.app.mesTenancy.register = function(registerDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/Register',
        type: 'POST',
        data: JSON.stringify(registerDto)
      }, ajaxParams));;
    };

    // action 'setActive'
    abp.services.app.mesTenancy.setActive = function(tenantId, isActive, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/SetActive' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'isActive', value: isActive }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'initModule'
    abp.services.app.mesTenancy.initModule = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/InitModule',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'initAdminRole'
    abp.services.app.mesTenancy.initAdminRole = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/InitAdminRole',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'updateField'
    abp.services.app.mesTenancy.updateField = function(tenantId, field, value, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/UpdateField' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'field', value: field }, { name: 'value', value: value }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'getTaskTemplates'
    abp.services.app.mesTenancy.getTaskTemplates = function(tenantId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/GetTaskTemplates' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addTaskTemplate'
    abp.services.app.mesTenancy.addTaskTemplate = function(tenantId, templateName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/AddTaskTemplate' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'templateName', value: templateName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'delTaskTemplate'
    abp.services.app.mesTenancy.delTaskTemplate = function(tenantId, templateId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/DelTaskTemplate' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'templateId', value: templateId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setTaskTemplate'
    abp.services.app.mesTenancy.setTaskTemplate = function(taskTemplateDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/SetTaskTemplate',
        type: 'POST',
        data: JSON.stringify(taskTemplateDto)
      }, ajaxParams));;
    };

    // action 'setTaskTemplateName'
    abp.services.app.mesTenancy.setTaskTemplateName = function(tenantId, id, templateName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/SetTaskTemplateName' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }, { name: 'id', value: id }, { name: 'templateName', value: templateName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setTenantProcessInfo'
    abp.services.app.mesTenancy.setTenantProcessInfo = function(processorInfo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/SetTenantProcessInfo',
        type: 'POST',
        data: JSON.stringify(processorInfo)
      }, ajaxParams));;
    };

    // action 'setTenantCharacteristics'
    abp.services.app.mesTenancy.setTenantCharacteristics = function(characteristics, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/SetTenantCharacteristics',
        type: 'POST',
        data: JSON.stringify(characteristics)
      }, ajaxParams));;
    };

    // action 'getProcessInfos'
    abp.services.app.mesTenancy.getProcessInfos = function(tenantId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/GetProcessInfos' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.mesTenancy.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.mesTenancy.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.mesTenancy.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.mesTenancy.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.mesTenancy.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.mesTenancy.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.mesTenancy.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.mesTenancy.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesTenancy/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'mESUnit'
  (function(){

    abp.services.app.mESUnit = abp.services.app.mESUnit || {};

    // action 'unBindTenant'
    abp.services.app.mESUnit.unBindTenant = function(unitIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/UnBindTenant',
        type: 'POST',
        data: JSON.stringify(unitIds)
      }, ajaxParams));;
    };

    // action 'getAllUnitUnCheckCount'
    abp.services.app.mESUnit.getAllUnitUnCheckCount = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetAllUnitUnCheckCount',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUnitByProcessTypeName'
    abp.services.app.mESUnit.getAllUnitByProcessTypeName = function(processTypeName, key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetAllUnitByProcessTypeName' + abp.utils.buildQueryString([{ name: 'processTypeName', value: processTypeName }, { name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUnitRankReport'
    abp.services.app.mESUnit.getUnitRankReport = function(processTypeId, startDate, endDate, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetUnitRankReport' + abp.utils.buildQueryString([{ name: 'processTypeId', value: processTypeId }, { name: 'startDate', value: startDate }, { name: 'endDate', value: endDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUnitDateRangeReport'
    abp.services.app.mESUnit.getUnitDateRangeReport = function(unitId, year, month, range, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetUnitDateRangeReport' + abp.utils.buildQueryString([{ name: 'unitId', value: unitId }, { name: 'year', value: year }, { name: 'month', value: month }, { name: 'range', value: range }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'findUnitOpenId'
    abp.services.app.mESUnit.findUnitOpenId = function(unitId, status, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/FindUnitOpenId' + abp.utils.buildQueryString([{ name: 'unitId', value: unitId }, { name: 'status', value: status }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getUnitTenantInfos'
    abp.services.app.mESUnit.getUnitTenantInfos = function(unitIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetUnitTenantInfos' + abp.utils.buildQueryString([{ name: 'unitIds', value: unitIds }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUnitTenantInfoByName'
    abp.services.app.mESUnit.getUnitTenantInfoByName = function(unitName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetUnitTenantInfoByName' + abp.utils.buildQueryString([{ name: 'unitName', value: unitName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUnitBindedReminders'
    abp.services.app.mESUnit.getUnitBindedReminders = function(unitId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetUnitBindedReminders' + abp.utils.buildQueryString([{ name: 'unitId', value: unitId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'removeUnitReminder'
    abp.services.app.mESUnit.removeUnitReminder = function(unitId, id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/RemoveUnitReminder' + abp.utils.buildQueryString([{ name: 'unitId', value: unitId }, { name: 'id', value: id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'sendNotice'
    abp.services.app.mESUnit.sendNotice = function(sendTenantNoticeDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/SendNotice',
        type: 'POST',
        data: JSON.stringify(sendTenantNoticeDto)
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.mESUnit.getAll = function(key, take, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetAll' + abp.utils.buildQueryString([{ name: 'key', value: key }, { name: 'take', value: take }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUnitNature'
    abp.services.app.mESUnit.getAllByUnitNature = function(unitNature, key, take, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetAllByUnitNature' + abp.utils.buildQueryString([{ name: 'unitNature', value: unitNature }, { name: 'key', value: key }, { name: 'take', value: take }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBySupplierType'
    abp.services.app.mESUnit.getAllBySupplierType = function(supplierType, key, take, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetAllBySupplierType' + abp.utils.buildQueryString([{ name: 'supplierType', value: supplierType }, { name: 'key', value: key }, { name: 'take', value: take }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.mESUnit.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.mESUnit.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.mESUnit.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.mESUnit.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.mESUnit.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.mESUnit.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.mESUnit.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.mESUnit.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.mESUnit.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MESUnit/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'mesUser'
  (function(){

    abp.services.app.mesUser = abp.services.app.mesUser || {};

    // action 'bindProcessType'
    abp.services.app.mesUser.bindProcessType = function(userId, processTypeIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/BindProcessType' + abp.utils.buildQueryString([{ name: 'userId', value: userId }]) + '',
        type: 'POST',
        data: JSON.stringify(processTypeIds)
      }, ajaxParams));;
    };

    // action 'getBindedProcessType'
    abp.services.app.mesUser.getBindedProcessType = function(userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/GetBindedProcessType' + abp.utils.buildQueryString([{ name: 'userId', value: userId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.mesUser.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.mesUser.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.mesUser.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.mesUser.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.mesUser.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.mesUser.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.mesUser.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.mesUser.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.mesUser.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MesUser/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'order'
  (function(){

    abp.services.app.order = abp.services.app.order || {};

    // action 'addProject'
    abp.services.app.order.addProject = function(ids, dics, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/AddProject' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'POST',
        data: JSON.stringify(dics)
      }, ajaxParams));;
    };

    // action 'getProjectsByOrderId'
    abp.services.app.order.getProjectsByOrderId = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/getProjectsByOrderId' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.order.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.order.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.order.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.order.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.order.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.order.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.order.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.order.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.order.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Order/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'part'
  (function(){

    abp.services.app.part = abp.services.app.part || {};

    // action 'getTaskPageResult'
    abp.services.app.part.getTaskPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetTaskPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.part.getAll = function(projectSN, key, enableProcess, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetAll' + abp.utils.buildQueryString([{ name: 'projectSN', value: projectSN }, { name: 'key', value: key }, { name: 'enableProcess', value: enableProcess }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setPartImg'
    abp.services.app.part.setPartImg = function(partId, partImg, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/SetPartImg' + abp.utils.buildQueryString([{ name: 'partId', value: partId }, { name: 'partImg', value: partImg }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getPartReports'
    abp.services.app.part.getPartReports = function(partId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetPartReports' + abp.utils.buildQueryString([{ name: 'partId', value: partId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPartTaskInfo'
    abp.services.app.part.getPartTaskInfo = function(partId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetPartTaskInfo' + abp.utils.buildQueryString([{ name: 'partId', value: partId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'savePartTaskInfo'
    abp.services.app.part.savePartTaskInfo = function(data, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/SavePartTaskInfo',
        type: 'POST',
        data: JSON.stringify(data)
      }, ajaxParams));;
    };

    // action 'exportPartProcessInfo'
    abp.services.app.part.exportPartProcessInfo = function(partIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/ExportPartProcessInfo',
        type: 'POST',
        data: JSON.stringify(partIds)
      }, ajaxParams));;
    };

    // action 'getPartInfos'
    abp.services.app.part.getPartInfos = function(projectId, partId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetPartInfos' + abp.utils.buildQueryString([{ name: 'projectId', value: projectId }, { name: 'partId', value: partId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPartTimeLineTasks'
    abp.services.app.part.getPartTimeLineTasks = function(from, to, projectId, partId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetPartTimeLineTasks' + abp.utils.buildQueryString([{ name: 'from', value: from }, { name: 'to', value: to }, { name: 'projectId', value: projectId }, { name: 'partId', value: partId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.part.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.part.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.part.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.part.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.part.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.part.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.part.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.part.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.part.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Part/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'processQuoteProcessor'
  (function(){

    abp.services.app.processQuoteProcessor = abp.services.app.processQuoteProcessor || {};

    // action 'getQuoteInfo'
    abp.services.app.processQuoteProcessor.getQuoteInfo = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/GetQuoteInfo' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'bid'
    abp.services.app.processQuoteProcessor.bid = function(processorBidDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/Bid',
        type: 'POST',
        data: JSON.stringify(processorBidDto)
      }, ajaxParams));;
    };

    // action 'processEquipmentSave'
    abp.services.app.processQuoteProcessor.processEquipmentSave = function(equipment, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/ProcessEquipmentSave',
        type: 'POST',
        data: JSON.stringify(equipment)
      }, ajaxParams));;
    };

    // action 'processEquipmentSaves'
    abp.services.app.processQuoteProcessor.processEquipmentSaves = function(equipmentlist, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/ProcessEquipmentSaves',
        type: 'POST',
        data: JSON.stringify(equipmentlist)
      }, ajaxParams));;
    };

    // action 'getProcessTypes'
    abp.services.app.processQuoteProcessor.getProcessTypes = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/GetProcessTypes',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.processQuoteProcessor.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.processQuoteProcessor.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.processQuoteProcessor.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.processQuoteProcessor.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.processQuoteProcessor.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.processQuoteProcessor.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.processQuoteProcessor.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.processQuoteProcessor.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.processQuoteProcessor.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuoteProcessor/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'processTaskProcessor'
  (function(){

    abp.services.app.processTaskProcessor = abp.services.app.processTaskProcessor || {};

    // action 'getPageResult'
    abp.services.app.processTaskProcessor.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskProcessor/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCustomers'
    abp.services.app.processTaskProcessor.getCustomers = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskProcessor/GetCustomers',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.processTaskProcessor.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskProcessor/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.processTaskProcessor.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskProcessor/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.processTaskProcessor.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskProcessor/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.processTaskProcessor.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskProcessor/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.processTaskProcessor.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskProcessor/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.processTaskProcessor.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskProcessor/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.processTaskProcessor.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskProcessor/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.processTaskProcessor.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskProcessor/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'processTaskReportProcessor'
  (function(){

    abp.services.app.processTaskReportProcessor = abp.services.app.processTaskReportProcessor || {};

    // action 'getPageResult'
    abp.services.app.processTaskReportProcessor.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReportProcessor/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.processTaskReportProcessor.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReportProcessor/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.processTaskReportProcessor.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReportProcessor/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.processTaskReportProcessor.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReportProcessor/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.processTaskReportProcessor.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReportProcessor/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.processTaskReportProcessor.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReportProcessor/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.processTaskReportProcessor.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReportProcessor/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.processTaskReportProcessor.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReportProcessor/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.processTaskReportProcessor.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReportProcessor/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'processQuote'
  (function(){

    abp.services.app.processQuote = abp.services.app.processQuote || {};

    // action 'submitProcessQuote'
    abp.services.app.processQuote.submitProcessQuote = function(processQuoteSubmitDto, isPublish, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/SubmitProcessQuote' + abp.utils.buildQueryString([{ name: 'isPublish', value: isPublish }]) + '',
        type: 'POST',
        data: JSON.stringify(processQuoteSubmitDto)
      }, ajaxParams));;
    };

    // action 'getQuoteInfo'
    abp.services.app.processQuote.getQuoteInfo = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/GetQuoteInfo' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'chooseBid'
    abp.services.app.processQuote.chooseBid = function(quoteId, bidId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/ChooseBid' + abp.utils.buildQueryString([{ name: 'quoteId', value: quoteId }, { name: 'bidId', value: bidId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getQuoteIdByTaskId'
    abp.services.app.processQuote.getQuoteIdByTaskId = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/GetQuoteIdByTaskId' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.processQuote.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.processQuote.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.processQuote.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.processQuote.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.processQuote.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.processQuote.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.processQuote.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.processQuote.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.processQuote.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessQuote/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'processTaskReport'
  (function(){

    abp.services.app.processTaskReport = abp.services.app.processTaskReport || {};

    // action 'getPageResult'
    abp.services.app.processTaskReport.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReportInfoById'
    abp.services.app.processTaskReport.getReportInfoById = function(reportId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetReportInfoById' + abp.utils.buildQueryString([{ name: 'reportId', value: reportId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBaseSearchData'
    abp.services.app.processTaskReport.getBaseSearchData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetBaseSearchData',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getModelName'
    abp.services.app.processTaskReport.getModelName = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetModelName',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateField'
    abp.services.app.processTaskReport.updateField = function(processTaskReportId, field, value, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/UpdateField' + abp.utils.buildQueryString([{ name: 'processTaskReportId', value: processTaskReportId }, { name: 'field', value: field }, { name: 'value', value: value }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.processTaskReport.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'reportNum'
    abp.services.app.processTaskReport.reportNum = function(requestPageDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/ReportNum' + abp.utils.buildQueryString([{ name: 'page', value: requestPageDto.page }, { name: 'limit', value: requestPageDto.limit }, { name: 'where', value: requestPageDto.where }, { name: 'tableFilter', value: requestPageDto.tableFilter }, { name: 'filterField', value: requestPageDto.filterField }, { name: 'filterKey', value: requestPageDto.filterKey }, { name: 'filterColumns', value: requestPageDto.filterColumns }, { name: 'searchCondition', value: requestPageDto.searchCondition }, { name: 'filterSos', value: requestPageDto.filterSos }, { name: 'searchKeys', value: requestPageDto.searchKeys }, { name: 'keyword', value: requestPageDto.keyword }, { name: 'orderField', value: requestPageDto.orderField }, { name: 'orderType', value: requestPageDto.orderType }, { name: 'moduleKey', value: requestPageDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'saveSearchData'
    abp.services.app.processTaskReport.saveSearchData = function(searchDataSave, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/SaveSearchData',
        type: 'POST',
        data: JSON.stringify(searchDataSave)
      }, ajaxParams));;
    };

    // action 'delSearchData'
    abp.services.app.processTaskReport.delSearchData = function(searchDataSave, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/DelSearchData',
        type: 'POST',
        data: JSON.stringify(searchDataSave)
      }, ajaxParams));;
    };

    // action 'rNameSearchData'
    abp.services.app.processTaskReport.rNameSearchData = function(searchDataSave, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/RNameSearchData',
        type: 'POST',
        data: JSON.stringify(searchDataSave)
      }, ajaxParams));;
    };

    // action 'getSearchData'
    abp.services.app.processTaskReport.getSearchData = function(name, key, pagename, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetSearchData' + abp.utils.buildQueryString([{ name: 'name', value: name }, { name: 'key', value: key }, { name: 'pagename', value: pagename }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSearchDataSave'
    abp.services.app.processTaskReport.getSearchDataSave = function(key, pagename, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetSearchDataSave' + abp.utils.buildQueryString([{ name: 'key', value: key }, { name: 'pagename', value: pagename }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.processTaskReport.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.processTaskReport.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.processTaskReport.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.processTaskReport.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.processTaskReport.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.processTaskReport.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.processTaskReport.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessTaskReport/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'processType'
  (function(){

    abp.services.app.processType = abp.services.app.processType || {};

    // action 'getStandardProcessTypes'
    abp.services.app.processType.getStandardProcessTypes = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetStandardProcessTypes',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.processType.getAll = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetAll' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllWithEquipmentCount'
    abp.services.app.processType.getAllWithEquipmentCount = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetAllWithEquipmentCount' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllWithUnArrangeTaskCount'
    abp.services.app.processType.getAllWithUnArrangeTaskCount = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetAllWithUnArrangeTaskCount' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUsedProcessTypes'
    abp.services.app.processType.getUsedProcessTypes = function(projectId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetUsedProcessTypes' + abp.utils.buildQueryString([{ name: 'projectId', value: projectId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addProcessType'
    abp.services.app.processType.addProcessType = function(processTypeName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/AddProcessType' + abp.utils.buildQueryString([{ name: 'processTypeName', value: processTypeName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateProcessType'
    abp.services.app.processType.updateProcessType = function(processTypeDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/UpdateProcessType',
        type: 'PUT',
        data: JSON.stringify(processTypeDto)
      }, ajaxParams));;
    };

    // action 'updateProcessTypes'
    abp.services.app.processType.updateProcessTypes = function(processTypeDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/UpdateProcessTypes',
        type: 'PUT',
        data: JSON.stringify(processTypeDtos)
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.processType.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.processType.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.processType.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.processType.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.processType.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.processType.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.processType.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.processType.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.processType.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcessType/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'remindLog'
  (function(){

    abp.services.app.remindLog = abp.services.app.remindLog || {};

    // action 'getPageResult'
    abp.services.app.remindLog.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RemindLog/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.remindLog.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RemindLog/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.remindLog.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RemindLog/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.remindLog.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RemindLog/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.remindLog.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RemindLog/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.remindLog.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RemindLog/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.remindLog.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RemindLog/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.remindLog.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RemindLog/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.remindLog.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RemindLog/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'report'
  (function(){

    abp.services.app.report = abp.services.app.report || {};

    // action 'getProcessTaskUnitMonthReport'
    abp.services.app.report.getProcessTaskUnitMonthReport = function(processTypeId, year, month, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Report/GetProcessTaskUnitMonthReport' + abp.utils.buildQueryString([{ name: 'processTypeId', value: processTypeId }, { name: 'year', value: year }, { name: 'month', value: month }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getManufactureSummary'
    abp.services.app.report.getManufactureSummary = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Report/GetManufactureSummary',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSupplierSummary'
    abp.services.app.report.getSupplierSummary = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Report/GetSupplierSummary',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReportLocation'
    abp.services.app.report.getReportLocation = function(startDate, endDate, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Report/GetReportLocation' + abp.utils.buildQueryString([{ name: 'startDate', value: startDate }, { name: 'endDate', value: endDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTaskMonthReportByProcesTypeName'
    abp.services.app.report.getTaskMonthReportByProcesTypeName = function(processTypeName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Report/GetTaskMonthReportByProcesTypeName' + abp.utils.buildQueryString([{ name: 'processTypeName', value: processTypeName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSummary'
    abp.services.app.report.getSummary = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Report/GetSummary',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'search'
  (function(){

    abp.services.app.search = abp.services.app.search || {};

    // action 'getSearchData'
    abp.services.app.search.getSearchData = function(name, key, pagename, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/GetSearchData' + abp.utils.buildQueryString([{ name: 'name', value: name }, { name: 'key', value: key }, { name: 'pagename', value: pagename }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getdata'
    abp.services.app.search.getdata = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/Getdata' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'saveSearchData'
    abp.services.app.search.saveSearchData = function(searchDataSave, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/SaveSearchData',
        type: 'POST',
        data: JSON.stringify(searchDataSave)
      }, ajaxParams));;
    };

    // action 'delSearchData'
    abp.services.app.search.delSearchData = function(searchDataSave, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/DelSearchData',
        type: 'POST',
        data: JSON.stringify(searchDataSave)
      }, ajaxParams));;
    };

    // action 'rNameSearchData'
    abp.services.app.search.rNameSearchData = function(searchDataSave, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/RNameSearchData',
        type: 'POST',
        data: JSON.stringify(searchDataSave)
      }, ajaxParams));;
    };

    // action 'getBaseSearchData'
    abp.services.app.search.getBaseSearchData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/GetBaseSearchData',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSearchDataSave'
    abp.services.app.search.getSearchDataSave = function(key, pagename, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/GetSearchDataSave' + abp.utils.buildQueryString([{ name: 'key', value: key }, { name: 'pagename', value: pagename }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.search.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.search.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.search.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.search.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.search.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.search.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.search.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.search.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.search.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Search/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'tactic'
  (function(){

    abp.services.app.tactic = abp.services.app.tactic || {};

    // action 'getRemindTacticPageResult'
    abp.services.app.tactic.getRemindTacticPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/GetRemindTacticPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRemindTacticHostPageResult'
    abp.services.app.tactic.getRemindTacticHostPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/GetRemindTacticHostPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitRemindTactic'
    abp.services.app.tactic.submitRemindTactic = function(remindTacticDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/SubmitRemindTactic',
        type: 'POST',
        data: JSON.stringify(remindTacticDto)
      }, ajaxParams));;
    };

    // action 'getRemindTacticInfoById'
    abp.services.app.tactic.getRemindTacticInfoById = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/GetRemindTacticInfoById' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'bindReminder'
    abp.services.app.tactic.bindReminder = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/BindReminder' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'bindCustomerReminder'
    abp.services.app.tactic.bindCustomerReminder = function(unitId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/BindCustomerReminder' + abp.utils.buildQueryString([{ name: 'unitId', value: unitId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'removeReminder'
    abp.services.app.tactic.removeReminder = function(tacticId, personId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/RemoveReminder' + abp.utils.buildQueryString([{ name: 'tacticId', value: tacticId }, { name: 'personId', value: personId }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setActive'
    abp.services.app.tactic.setActive = function(tacticId, isActive, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/SetActive' + abp.utils.buildQueryString([{ name: 'tacticId', value: tacticId }, { name: 'isActive', value: isActive }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.tactic.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.tactic.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.tactic.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.tactic.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.tactic.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.tactic.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.tactic.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.tactic.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.tactic.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tactic/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'video'
  (function(){

    abp.services.app.video = abp.services.app.video || {};

    // action 'submitVideos'
    abp.services.app.video.submitVideos = function(videoDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/SubmitVideos',
        type: 'POST',
        data: JSON.stringify(videoDtos)
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.app.video.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllList'
    abp.services.app.video.getAllList = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/GetAllList',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.app.video.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.app.video.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.app.video.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.app.video.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.app.video.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.app.video.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.app.video.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.app.video.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Video/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

})();

// module 'finance'
(function(){

  abp.services.finance = abp.services.finance || {};

  // controller 'cancellation'
  (function(){

    abp.services.finance.cancellation = abp.services.finance.cancellation || {};

    // action 'getPageResult'
    abp.services.finance.cancellation.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/Cancellation/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.finance.cancellation.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/Cancellation/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.finance.cancellation.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/Cancellation/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.finance.cancellation.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/Cancellation/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.finance.cancellation.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/Cancellation/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.finance.cancellation.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/Cancellation/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.finance.cancellation.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/Cancellation/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.finance.cancellation.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/Cancellation/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.finance.cancellation.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/Cancellation/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'financeFlowSheet'
  (function(){

    abp.services.finance.financeFlowSheet = abp.services.finance.financeFlowSheet || {};

    // action 'getPageResult'
    abp.services.finance.financeFlowSheet.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceFlowSheet/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.finance.financeFlowSheet.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceFlowSheet/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.finance.financeFlowSheet.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceFlowSheet/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.finance.financeFlowSheet.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceFlowSheet/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.finance.financeFlowSheet.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceFlowSheet/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.finance.financeFlowSheet.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceFlowSheet/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.finance.financeFlowSheet.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceFlowSheet/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.finance.financeFlowSheet.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceFlowSheet/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.finance.financeFlowSheet.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceFlowSheet/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'financeSubject'
  (function(){

    abp.services.finance.financeSubject = abp.services.finance.financeSubject || {};

    // action 'getAllList'
    abp.services.finance.financeSubject.getAllList = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/GetAllList',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addSubject'
    abp.services.finance.financeSubject.addSubject = function(subjectInsertDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/AddSubject',
        type: 'POST',
        data: JSON.stringify(subjectInsertDto)
      }, ajaxParams));;
    };

    // action 'editSubject'
    abp.services.finance.financeSubject.editSubject = function(subjectUpdateDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/EditSubject',
        type: 'POST',
        data: JSON.stringify(subjectUpdateDto)
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.finance.financeSubject.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.finance.financeSubject.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.finance.financeSubject.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.finance.financeSubject.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.finance.financeSubject.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.finance.financeSubject.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.finance.financeSubject.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.finance.financeSubject.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.finance.financeSubject.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceSubject/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'financeUnit'
  (function(){

    abp.services.finance.financeUnit = abp.services.finance.financeUnit || {};

    // action 'getUnitTotalCost'
    abp.services.finance.financeUnit.getUnitTotalCost = function(startDate, endDate, unitName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/GetUnitTotalCost' + abp.utils.buildQueryString([{ name: 'startDate', value: startDate }, { name: 'endDate', value: endDate }, { name: 'unitName', value: unitName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUnFinishFeeSheets'
    abp.services.finance.financeUnit.getUnFinishFeeSheets = function(unitId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/GetUnFinishFeeSheets' + abp.utils.buildQueryString([{ name: 'unitId', value: unitId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.finance.financeUnit.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.finance.financeUnit.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.finance.financeUnit.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.finance.financeUnit.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.finance.financeUnit.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.finance.financeUnit.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.finance.financeUnit.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.finance.financeUnit.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.finance.financeUnit.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnit/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'financeUnitFeeHistory'
  (function(){

    abp.services.finance.financeUnitFeeHistory = abp.services.finance.financeUnitFeeHistory || {};

    // action 'getPageResult'
    abp.services.finance.financeUnitFeeHistory.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnitFeeHistory/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.finance.financeUnitFeeHistory.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnitFeeHistory/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.finance.financeUnitFeeHistory.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnitFeeHistory/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.finance.financeUnitFeeHistory.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnitFeeHistory/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.finance.financeUnitFeeHistory.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnitFeeHistory/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.finance.financeUnitFeeHistory.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnitFeeHistory/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.finance.financeUnitFeeHistory.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnitFeeHistory/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.finance.financeUnitFeeHistory.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnitFeeHistory/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.finance.financeUnitFeeHistory.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/FinanceUnitFeeHistory/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'unitFeeList'
  (function(){

    abp.services.finance.unitFeeList = abp.services.finance.unitFeeList || {};

    // action 'getPageResult'
    abp.services.finance.unitFeeList.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/UnitFeeList/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.finance.unitFeeList.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/UnitFeeList/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.finance.unitFeeList.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/UnitFeeList/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.finance.unitFeeList.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/UnitFeeList/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.finance.unitFeeList.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/UnitFeeList/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.finance.unitFeeList.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/UnitFeeList/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.finance.unitFeeList.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/UnitFeeList/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.finance.unitFeeList.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/UnitFeeList/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.finance.unitFeeList.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/finance/UnitFeeList/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

})();

// module 'im'
(function(){

  abp.services.im = abp.services.im || {};

  // controller 'data'
  (function(){

    abp.services.im.data = abp.services.im.data || {};

    // action 'getInitData'
    abp.services.im.data.getInitData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/GetInitData',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMember'
    abp.services.im.data.getMember = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/GetMember' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getChatLog'
    abp.services.im.data.getChatLog = function(toid, type, page, limit, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/GetChatLog' + abp.utils.buildQueryString([{ name: 'toid', value: toid }, { name: 'type', value: type }, { name: 'page', value: page }, { name: 'limit', value: limit }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUnReadedNotificationCount'
    abp.services.im.data.getUnReadedNotificationCount = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/GetUnReadedNotificationCount',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setAllNotificationReaded'
    abp.services.im.data.setAllNotificationReaded = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/SetAllNotificationReaded',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.im.data.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.im.data.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.im.data.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.im.data.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.im.data.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.im.data.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.im.data.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.im.data.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.im.data.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Data/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'group'
  (function(){

    abp.services.im.group = abp.services.im.group || {};

    // action 'addToProjectGroup'
    abp.services.im.group.addToProjectGroup = function(projectId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/im/Group/AddToProjectGroup' + abp.utils.buildQueryString([{ name: 'projectId', value: projectId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

})();

// module 'storage'
(function(){

  abp.services.storage = abp.services.storage || {};

  // controller 'inOutType'
  (function(){

    abp.services.storage.inOutType = abp.services.storage.inOutType || {};

    // action 'getAll'
    abp.services.storage.inOutType.getAll = function(requestPageDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/InOutType/GetAll' + abp.utils.buildQueryString([{ name: 'page', value: requestPageDto.page }, { name: 'limit', value: requestPageDto.limit }, { name: 'where', value: requestPageDto.where }, { name: 'tableFilter', value: requestPageDto.tableFilter }, { name: 'filterField', value: requestPageDto.filterField }, { name: 'filterKey', value: requestPageDto.filterKey }, { name: 'filterColumns', value: requestPageDto.filterColumns }, { name: 'searchCondition', value: requestPageDto.searchCondition }, { name: 'filterSos', value: requestPageDto.filterSos }, { name: 'searchKeys', value: requestPageDto.searchKeys }, { name: 'keyword', value: requestPageDto.keyword }, { name: 'orderField', value: requestPageDto.orderField }, { name: 'orderType', value: requestPageDto.orderType }, { name: 'moduleKey', value: requestPageDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.inOutType.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/InOutType/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.inOutType.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/InOutType/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.inOutType.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/InOutType/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.inOutType.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/InOutType/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.storage.inOutType.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/InOutType/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.inOutType.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/InOutType/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.inOutType.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/InOutType/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.inOutType.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/InOutType/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.inOutType.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/InOutType/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'material'
  (function(){

    abp.services.storage.material = abp.services.storage.material || {};

    // action 'getMaterialInfo'
    abp.services.storage.material.getMaterialInfo = function(materialId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Material/GetMaterialInfo' + abp.utils.buildQueryString([{ name: 'materialId', value: materialId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.material.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Material/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.material.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Material/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.material.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Material/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.material.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Material/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.material.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Material/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.storage.material.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Material/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.material.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Material/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.material.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Material/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.material.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Material/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'materialBuy'
  (function(){

    abp.services.storage.materialBuy = abp.services.storage.materialBuy || {};

    // action 'getListByIds'
    abp.services.storage.materialBuy.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOperationHistory'
    abp.services.storage.materialBuy.getOperationHistory = function(materialRequireId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/GetOperationHistory' + abp.utils.buildQueryString([{ name: 'materialRequireId', value: materialRequireId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'sendToBuyRequire'
    abp.services.storage.materialBuy.sendToBuyRequire = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/SendToBuyRequire',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'sendToOutRequire'
    abp.services.storage.materialBuy.sendToOutRequire = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/SendToOutRequire',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'quote'
    abp.services.storage.materialBuy.quote = function(materialRequireQuoteDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/Quote',
        type: 'POST',
        data: JSON.stringify(materialRequireQuoteDtos)
      }, ajaxParams));;
    };

    // action 'getQuoteDetail'
    abp.services.storage.materialBuy.getQuoteDetail = function(materialRequireId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/GetQuoteDetail' + abp.utils.buildQueryString([{ name: 'materialRequireId', value: materialRequireId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.materialBuy.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.materialBuy.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.materialBuy.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.materialBuy.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.materialBuy.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.materialBuy.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.materialBuy.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.materialBuy.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuy/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'materialBuyRequire'
  (function(){

    abp.services.storage.materialBuyRequire = abp.services.storage.materialBuyRequire || {};

    // action 'getListByIds'
    abp.services.storage.materialBuyRequire.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOperationHistory'
    abp.services.storage.materialBuyRequire.getOperationHistory = function(materialRequireId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/GetOperationHistory' + abp.utils.buildQueryString([{ name: 'materialRequireId', value: materialRequireId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'sendToBuyRequire'
    abp.services.storage.materialBuyRequire.sendToBuyRequire = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/SendToBuyRequire',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'sendToOutRequire'
    abp.services.storage.materialBuyRequire.sendToOutRequire = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/SendToOutRequire',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'quote'
    abp.services.storage.materialBuyRequire.quote = function(materialRequireQuoteDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/Quote',
        type: 'POST',
        data: JSON.stringify(materialRequireQuoteDtos)
      }, ajaxParams));;
    };

    // action 'getQuoteDetail'
    abp.services.storage.materialBuyRequire.getQuoteDetail = function(materialRequireId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/GetQuoteDetail' + abp.utils.buildQueryString([{ name: 'materialRequireId', value: materialRequireId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.materialBuyRequire.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.materialBuyRequire.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.materialBuyRequire.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.materialBuyRequire.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.materialBuyRequire.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.materialBuyRequire.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.materialBuyRequire.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.materialBuyRequire.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialBuyRequire/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'materialOutRequire'
  (function(){

    abp.services.storage.materialOutRequire = abp.services.storage.materialOutRequire || {};

    // action 'getListByIds'
    abp.services.storage.materialOutRequire.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOperationHistory'
    abp.services.storage.materialOutRequire.getOperationHistory = function(materialRequireId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/GetOperationHistory' + abp.utils.buildQueryString([{ name: 'materialRequireId', value: materialRequireId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'sendToBuyRequire'
    abp.services.storage.materialOutRequire.sendToBuyRequire = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/SendToBuyRequire',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'sendToOutRequire'
    abp.services.storage.materialOutRequire.sendToOutRequire = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/SendToOutRequire',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'quote'
    abp.services.storage.materialOutRequire.quote = function(materialRequireQuoteDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/Quote',
        type: 'POST',
        data: JSON.stringify(materialRequireQuoteDtos)
      }, ajaxParams));;
    };

    // action 'getQuoteDetail'
    abp.services.storage.materialOutRequire.getQuoteDetail = function(materialRequireId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/GetQuoteDetail' + abp.utils.buildQueryString([{ name: 'materialRequireId', value: materialRequireId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.materialOutRequire.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.materialOutRequire.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.materialOutRequire.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.materialOutRequire.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.materialOutRequire.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.materialOutRequire.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.materialOutRequire.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.materialOutRequire.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialOutRequire/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'materialProject'
  (function(){

    abp.services.storage.materialProject = abp.services.storage.materialProject || {};

    // action 'getListByIds'
    abp.services.storage.materialProject.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOperationHistory'
    abp.services.storage.materialProject.getOperationHistory = function(materialRequireId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/GetOperationHistory' + abp.utils.buildQueryString([{ name: 'materialRequireId', value: materialRequireId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'sendToBuyRequire'
    abp.services.storage.materialProject.sendToBuyRequire = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/SendToBuyRequire',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'sendToOutRequire'
    abp.services.storage.materialProject.sendToOutRequire = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/SendToOutRequire',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'quote'
    abp.services.storage.materialProject.quote = function(materialRequireQuoteDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/Quote',
        type: 'POST',
        data: JSON.stringify(materialRequireQuoteDtos)
      }, ajaxParams));;
    };

    // action 'getQuoteDetail'
    abp.services.storage.materialProject.getQuoteDetail = function(materialRequireId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/GetQuoteDetail' + abp.utils.buildQueryString([{ name: 'materialRequireId', value: materialRequireId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.materialProject.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.materialProject.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.materialProject.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.materialProject.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.materialProject.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.materialProject.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.materialProject.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.materialProject.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialProject/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'materialRequire'
  (function(){

    abp.services.storage.materialRequire = abp.services.storage.materialRequire || {};

    // action 'getListByIds'
    abp.services.storage.materialRequire.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOperationHistory'
    abp.services.storage.materialRequire.getOperationHistory = function(materialRequireId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/GetOperationHistory' + abp.utils.buildQueryString([{ name: 'materialRequireId', value: materialRequireId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'sendToBuyRequire'
    abp.services.storage.materialRequire.sendToBuyRequire = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/SendToBuyRequire',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'sendToOutRequire'
    abp.services.storage.materialRequire.sendToOutRequire = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/SendToOutRequire',
        type: 'POST',
        data: JSON.stringify(ids)
      }, ajaxParams));;
    };

    // action 'quote'
    abp.services.storage.materialRequire.quote = function(materialRequireQuoteDtos, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/Quote',
        type: 'POST',
        data: JSON.stringify(materialRequireQuoteDtos)
      }, ajaxParams));;
    };

    // action 'getQuoteDetail'
    abp.services.storage.materialRequire.getQuoteDetail = function(materialRequireId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/GetQuoteDetail' + abp.utils.buildQueryString([{ name: 'materialRequireId', value: materialRequireId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.materialRequire.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.materialRequire.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.materialRequire.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.materialRequire.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.materialRequire.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.materialRequire.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.materialRequire.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.materialRequire.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequire/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'materialRequireQuote'
  (function(){

    abp.services.storage.materialRequireQuote = abp.services.storage.materialRequireQuote || {};

    // action 'getAllUnitQuoteCount'
    abp.services.storage.materialRequireQuote.getAllUnitQuoteCount = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/GetAllUnitQuoteCount',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setQuoteInfo'
    abp.services.storage.materialRequireQuote.setQuoteInfo = function(id, field, value, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/SetQuoteInfo' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'field', value: field }, { name: 'value', value: value }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.storage.materialRequireQuote.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.materialRequireQuote.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.materialRequireQuote.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.materialRequireQuote.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.materialRequireQuote.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.materialRequireQuote.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.materialRequireQuote.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.materialRequireQuote.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.materialRequireQuote.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialRequireQuote/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'materialUseInfo'
  (function(){

    abp.services.storage.materialUseInfo = abp.services.storage.materialUseInfo || {};

    // action 'getListByIds'
    abp.services.storage.materialUseInfo.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialUseInfo/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.materialUseInfo.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialUseInfo/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.materialUseInfo.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialUseInfo/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.materialUseInfo.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialUseInfo/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.materialUseInfo.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialUseInfo/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.materialUseInfo.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialUseInfo/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.materialUseInfo.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialUseInfo/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.materialUseInfo.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialUseInfo/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.materialUseInfo.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MaterialUseInfo/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'measureMent'
  (function(){

    abp.services.storage.measureMent = abp.services.storage.measureMent || {};

    // action 'submitMeasureMent'
    abp.services.storage.measureMent.submitMeasureMent = function(measureMentDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/SubmitMeasureMent',
        type: 'POST',
        data: JSON.stringify(measureMentDto)
      }, ajaxParams));;
    };

    // action 'getMeasureMent'
    abp.services.storage.measureMent.getMeasureMent = function(measureMentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/GetMeasureMent' + abp.utils.buildQueryString([{ name: 'measureMentId', value: measureMentId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.measureMent.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.measureMent.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.measureMent.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.measureMent.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.storage.measureMent.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.measureMent.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.measureMent.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.measureMent.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.measureMent.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/MeasureMent/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'store'
  (function(){

    abp.services.storage.store = abp.services.storage.store || {};

    // action 'getAllStoreAndLocations'
    abp.services.storage.store.getAllStoreAndLocations = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetAllStoreAndLocations',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStoreInfo'
    abp.services.storage.store.getStoreInfo = function(storeId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetStoreInfo' + abp.utils.buildQueryString([{ name: 'storeId', value: storeId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllLocationsPageResult'
    abp.services.storage.store.getAllLocationsPageResult = function(storeId, showInActive, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetAllLocationsPageResult' + abp.utils.buildQueryString([{ name: 'storeId', value: storeId }, { name: 'showInActive', value: showInActive }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllLocation'
    abp.services.storage.store.getAllLocation = function(storeId, showInActive, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetAllLocation' + abp.utils.buildQueryString([{ name: 'storeId', value: storeId }, { name: 'showInActive', value: showInActive }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addLocation'
    abp.services.storage.store.addLocation = function(storeId, locationName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/AddLocation' + abp.utils.buildQueryString([{ name: 'storeId', value: storeId }, { name: 'locationName', value: locationName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateLocation'
    abp.services.storage.store.updateLocation = function(locationId, fieldName, fieldValue, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/UpdateLocation' + abp.utils.buildQueryString([{ name: 'locationId', value: locationId }, { name: 'fieldName', value: fieldName }, { name: 'fieldValue', value: fieldValue }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'setActiveLocation'
    abp.services.storage.store.setActiveLocation = function(locationId, isActive, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/SetActiveLocation' + abp.utils.buildQueryString([{ name: 'locationId', value: locationId }, { name: 'isActive', value: isActive }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'deleteLocations'
    abp.services.storage.store.deleteLocations = function(locationIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/DeleteLocations' + abp.utils.buildQueryString([{ name: 'locationIds', value: locationIds }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLocationInfo'
    abp.services.storage.store.getLocationInfo = function(locationId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetLocationInfo' + abp.utils.buildQueryString([{ name: 'locationId', value: locationId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.store.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.store.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.store.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.store.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.store.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.storage.store.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.store.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.store.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.store.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/Store/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'storeMaterial'
  (function(){

    abp.services.storage.storeMaterial = abp.services.storage.storeMaterial || {};

    // action 'getAllUnitStoreCount'
    abp.services.storage.storeMaterial.getAllUnitStoreCount = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/GetAllUnitStoreCount',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStoreMaterialByMaterialId'
    abp.services.storage.storeMaterial.getStoreMaterialByMaterialId = function(materialId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/GetStoreMaterialByMaterialId' + abp.utils.buildQueryString([{ name: 'materialId', value: materialId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'storeMaterialSplit'
    abp.services.storage.storeMaterial.storeMaterialSplit = function(storeMaterialSplitDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/StoreMaterialSplit',
        type: 'POST',
        data: JSON.stringify(storeMaterialSplitDto)
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.storeMaterial.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.storage.storeMaterial.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.storage.storeMaterial.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.storeMaterial.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.storeMaterial.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.storeMaterial.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.storeMaterial.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.storeMaterial.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.storeMaterial.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterial/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'storeMaterialHistory'
  (function(){

    abp.services.storage.storeMaterialHistory = abp.services.storage.storeMaterialHistory || {};

    // action 'getPageResult'
    abp.services.storage.storeMaterialHistory.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterialHistory/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.storage.storeMaterialHistory.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterialHistory/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.storage.storeMaterialHistory.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterialHistory/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.storage.storeMaterialHistory.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterialHistory/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.storage.storeMaterialHistory.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterialHistory/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.storage.storeMaterialHistory.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterialHistory/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.storage.storeMaterialHistory.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterialHistory/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.storage.storeMaterialHistory.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterialHistory/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.storage.storeMaterialHistory.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/storage/StoreMaterialHistory/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

})();

// module 'mouldtry'
(function(){

  abp.services.mouldtry = abp.services.mouldtry || {};

  // controller 'mouldTry'
  (function(){

    abp.services.mouldtry.mouldTry = abp.services.mouldtry.mouldTry || {};

    // action 'submitMouldTry'
    abp.services.mouldtry.mouldTry.submitMouldTry = function(mouldTryDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/SubmitMouldTry',
        type: 'POST',
        data: JSON.stringify(mouldTryDto)
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.mouldtry.mouldTry.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMouldTryInfoById'
    abp.services.mouldtry.mouldTry.getMouldTryInfoById = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetMouldTryInfoById' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTaskTemplateData'
    abp.services.mouldtry.mouldTry.getTaskTemplateData = function(taskId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetTaskTemplateData' + abp.utils.buildQueryString([{ name: 'taskId', value: taskId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHistory'
    abp.services.mouldtry.mouldTry.getHistory = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetHistory' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMaterialInfo'
    abp.services.mouldtry.mouldTry.getMaterialInfo = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetMaterialInfo' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOperateInfo'
    abp.services.mouldtry.mouldTry.getOperateInfo = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetOperateInfo' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.mouldtry.mouldTry.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.mouldtry.mouldTry.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.mouldtry.mouldTry.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.mouldtry.mouldTry.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.mouldtry.mouldTry.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.mouldtry.mouldTry.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.mouldtry.mouldTry.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.mouldtry.mouldTry.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTry/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'mouldTryDetail'
  (function(){

    abp.services.mouldtry.mouldTryDetail = abp.services.mouldtry.mouldTryDetail || {};

    // action 'getProblemType'
    abp.services.mouldtry.mouldTryDetail.getProblemType = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/GetProblemType',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitMouldTryDetail'
    abp.services.mouldtry.mouldTryDetail.submitMouldTryDetail = function(mouldTryDetailDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/SubmitMouldTryDetail',
        type: 'POST',
        data: JSON.stringify(mouldTryDetailDto)
      }, ajaxParams));;
    };

    // action 'getMouldTryDetailById'
    abp.services.mouldtry.mouldTryDetail.getMouldTryDetailById = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/GetMouldTryDetailById' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProblemListByTryId'
    abp.services.mouldtry.mouldTryDetail.getProblemListByTryId = function(id, typeId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/GetProblemListByTryId' + abp.utils.buildQueryString([{ name: 'id', value: id }, { name: 'typeId', value: typeId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getByDetailId'
    abp.services.mouldtry.mouldTryDetail.getByDetailId = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/GetByDetailId' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.mouldtry.mouldTryDetail.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.mouldtry.mouldTryDetail.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.mouldtry.mouldTryDetail.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.mouldtry.mouldTryDetail.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.mouldtry.mouldTryDetail.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.mouldtry.mouldTryDetail.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.mouldtry.mouldTryDetail.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.mouldtry.mouldTryDetail.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.mouldtry.mouldTryDetail.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/mouldtry/MouldTryDetail/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

})();

// module 'scheduler'
(function(){

  abp.services.scheduler = abp.services.scheduler || {};

  // controller 'projectScheduler'
  (function(){

    abp.services.scheduler.projectScheduler = abp.services.scheduler.projectScheduler || {};

    // action 'submitProjectScheduler'
    abp.services.scheduler.projectScheduler.submitProjectScheduler = function(projectId, projectSchedulerSubmitDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/SubmitProjectScheduler' + abp.utils.buildQueryString([{ name: 'projectId', value: projectId }]) + '',
        type: 'POST',
        data: JSON.stringify(projectSchedulerSubmitDto)
      }, ajaxParams));;
    };

    // action 'getProjectScheduler'
    abp.services.scheduler.projectScheduler.getProjectScheduler = function(projectId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/GetProjectScheduler' + abp.utils.buildQueryString([{ name: 'projectId', value: projectId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'exportProjectScheduler'
    abp.services.scheduler.projectScheduler.exportProjectScheduler = function(projectId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/ExportProjectScheduler' + abp.utils.buildQueryString([{ name: 'projectId', value: projectId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.scheduler.projectScheduler.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.scheduler.projectScheduler.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.scheduler.projectScheduler.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.scheduler.projectScheduler.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.scheduler.projectScheduler.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.scheduler.projectScheduler.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.scheduler.projectScheduler.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.scheduler.projectScheduler.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.scheduler.projectScheduler.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/scheduler/ProjectScheduler/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

})();

// module 'workflow'
(function(){

  abp.services.workflow = abp.services.workflow || {};

  // controller 'flowForm'
  (function(){

    abp.services.workflow.flowForm = abp.services.workflow.flowForm || {};

    // action 'getAll'
    abp.services.workflow.flowForm.getAll = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/GetAll',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFormDesigner'
    abp.services.workflow.flowForm.getFormDesigner = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/GetFormDesigner' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitFormDesigner'
    abp.services.workflow.flowForm.submitFormDesigner = function(formDesignerDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/SubmitFormDesigner',
        type: 'POST',
        data: JSON.stringify(formDesignerDto)
      }, ajaxParams));;
    };

    // action 'getFormHtml'
    abp.services.workflow.flowForm.getFormHtml = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/GetFormHtml' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitFormHtml'
    abp.services.workflow.flowForm.submitFormHtml = function(formHtmlDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/SubmitFormHtml',
        type: 'POST',
        data: JSON.stringify(formHtmlDto)
      }, ajaxParams));;
    };

    // action 'getFormHandler'
    abp.services.workflow.flowForm.getFormHandler = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/GetFormHandler' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitFormHandler'
    abp.services.workflow.flowForm.submitFormHandler = function(formHtmlDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/SubmitFormHandler',
        type: 'POST',
        data: JSON.stringify(formHtmlDto)
      }, ajaxParams));;
    };

    // action 'initDefaultForm'
    abp.services.workflow.flowForm.initDefaultForm = function(tenantId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/InitDefaultForm' + abp.utils.buildQueryString([{ name: 'tenantId', value: tenantId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.workflow.flowForm.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.workflow.flowForm.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.workflow.flowForm.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.workflow.flowForm.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.workflow.flowForm.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.workflow.flowForm.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.workflow.flowForm.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.workflow.flowForm.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.workflow.flowForm.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowForm/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'flowInstance'
  (function(){

    abp.services.workflow.flowInstance = abp.services.workflow.flowInstance || {};

    // action 'createInstance'
    abp.services.workflow.flowInstance.createInstance = function(flowInstanceCreateDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/CreateInstance',
        type: 'POST',
        data: JSON.stringify(flowInstanceCreateDto)
      }, ajaxParams));;
    };

    // action 'repostInstance'
    abp.services.workflow.flowInstance.repostInstance = function(flowInstanceRepostDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/RepostInstance',
        type: 'POST',
        data: JSON.stringify(flowInstanceRepostDto)
      }, ajaxParams));;
    };

    // action 'nodeVerification'
    abp.services.workflow.flowInstance.nodeVerification = function(instanceId, tag, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/NodeVerification' + abp.utils.buildQueryString([{ name: 'instanceId', value: instanceId }]) + '',
        type: 'POST',
        data: JSON.stringify(tag)
      }, ajaxParams));;
    };

    // action 'nodeReject'
    abp.services.workflow.flowInstance.nodeReject = function(reqest, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/NodeReject',
        type: 'POST',
        data: JSON.stringify(reqest)
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.workflow.flowInstance.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'verification'
    abp.services.workflow.flowInstance.verification = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/Verification',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.workflow.flowInstance.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.workflow.flowInstance.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.workflow.flowInstance.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.workflow.flowInstance.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.workflow.flowInstance.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.workflow.flowInstance.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.workflow.flowInstance.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.workflow.flowInstance.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.workflow.flowInstance.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowInstance/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

  // controller 'flowScheme'
  (function(){

    abp.services.workflow.flowScheme = abp.services.workflow.flowScheme || {};

    // action 'getAvailableFlowSchemes'
    abp.services.workflow.flowScheme.getAvailableFlowSchemes = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/GetAvailableFlowSchemes',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'get'
    abp.services.workflow.flowScheme.get = function(schemeId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/Get' + abp.utils.buildQueryString([{ name: 'schemeId', value: schemeId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.workflow.flowScheme.update = function(flowSchemeDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/Update',
        type: 'PUT',
        data: JSON.stringify(flowSchemeDto)
      }, ajaxParams));;
    };

    // action 'getPageResult'
    abp.services.workflow.flowScheme.getPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/GetPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSuggestResult'
    abp.services.workflow.flowScheme.getSuggestResult = function(requestSuggestDto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/GetSuggestResult' + abp.utils.buildQueryString([{ name: 'columnKey', value: requestSuggestDto.columnKey }, { name: 'keyword', value: requestSuggestDto.keyword }, { name: 'moduleKey', value: requestSuggestDto.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'formSubmit'
    abp.services.workflow.flowScheme.formSubmit = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/FormSubmit',
        type: 'POST',
        data: JSON.stringify(request)
      }, ajaxParams));;
    };

    // action 'getFilterColumnPageResult'
    abp.services.workflow.flowScheme.getFilterColumnPageResult = function(request, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/GetFilterColumnPageResult' + abp.utils.buildQueryString([{ name: 'page', value: request.page }, { name: 'limit', value: request.limit }, { name: 'where', value: request.where }, { name: 'tableFilter', value: request.tableFilter }, { name: 'filterField', value: request.filterField }, { name: 'filterKey', value: request.filterKey }, { name: 'filterColumns', value: request.filterColumns }, { name: 'searchCondition', value: request.searchCondition }, { name: 'filterSos', value: request.filterSos }, { name: 'searchKeys', value: request.searchKeys }, { name: 'keyword', value: request.keyword }, { name: 'orderField', value: request.orderField }, { name: 'orderType', value: request.orderType }, { name: 'moduleKey', value: request.moduleKey }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getById'
    abp.services.workflow.flowScheme.getById = function(primary, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/GetById' + abp.utils.buildQueryString([{ name: 'primary', value: primary }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getListByIds'
    abp.services.workflow.flowScheme.getListByIds = function(primaries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/GetListByIds' + abp.utils.buildQueryString([{ name: 'primaries', value: primaries }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupedField'
    abp.services.workflow.flowScheme.getGroupedField = function(key, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/GetGroupedField' + abp.utils.buildQueryString([{ name: 'key', value: key }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteEntity'
    abp.services.workflow.flowScheme.deleteEntity = function(ids, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/DeleteEntity' + abp.utils.buildQueryString([{ name: 'ids', value: ids }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setStatus'
    abp.services.workflow.flowScheme.setStatus = function(primaries, status, isSet, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/workflow/FlowScheme/SetStatus' + abp.utils.buildQueryString([{ name: 'status', value: status }, { name: 'isSet', value: isSet }]) + '',
        type: 'POST',
        data: JSON.stringify(primaries)
      }, ajaxParams));;
    };

  })();

})();
