@using Master.Web.Components
@inherits Master.Web.Components.MasterRazorPage<TModel>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Master.Web.Core
@{
    ViewData["Title"] = "大数据";
}
@section styles{
    <link href="~/lib/swiper/swiper.min.css" rel="stylesheet" />
    <style>
        html {
            background: #35358d;
            color: #fff;
            overflow: hidden;
            font-family: 微软雅黑;
            background-image: url(/assets/images/bg3.jpg);
            background-size: 100% 100%;
        }

        #app {
            padding: 0 20px;
        }

        #logo {
            height: 10vh;
            width: 10vh;
        }

        #top3 img {
            width: 25%;
            margin: 1vh;
        }

        .layui-col-md3 h1 {
            display: inline;
        }

        .mid-head ul {
            display: flex;
            margin: 20px 0;
        }

        .mid-head li {
            width: 33%;
            text-align: center;
            line-height: 1.5;
        }

            .mid-head li p:first-child {
                font-size: 40px;
            }

            .mid-head li p:last-child {
                font-size: 25px;
            }

        .now-time {
            font-size: 30px;
            text-align: center;
        }

        .swiper-container {
            height: 50vh
        }

        .swiper-slide {
            text-align: center;
            font-size: 18px;
        }

        .msg-wrap {
            padding: 0 3vh;
            display: flex;
            align-items: center;
        }

            .msg-wrap img.logo {
                width: 5vh;
                height: 5vh;
                object-fit: cover;
                border-radius: 50%;
                opacity: 0.8;
            }

            .msg-wrap img.files {
                height: 12vh;
                /*object-fit: scale-down;*/
                max-width: 12vh;
                padding: 2vh 0;
            }

        .msg-text {
            flex: 1;
            text-align: left;
            margin-left: 15px;
        }

        .layui-col-md6 {
            display: flex;
            flex-direction: column;
            height: 100vh;
            padding: 0 3vh;
        }

            .layui-col-md6 #map {
                flex: 1;
                margin-bottom: 5vh;
            }

        .wrap-background {
            background-color: rgba(18, 15, 44, .5);
            background-color: rgba(18, 15, 44, .5);
            box-shadow: 1;
            border-radius: 10px;
            /* box-shadow: 0 1px 2px rgba(0,0,0,0.15); */
            /* box-shadow: 0 5px 15px rgba(0,0,0,0.3); */
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            transition: opacity 0.3s ease-in-out;
        }

        .head-logo {
            height: 10vh;
            margin: 1vh 0;
            /*background: #23225c;*/
            border-radius: 50px;
            padding-left: 50px;
        }

        .layui-col-md6 #container {
            flex: 1;
            margin-bottom: 5vh;
        }
    </style>

}
@section MainBody{
    <div id="app" v-cloak>
        <div class="layui-row">
            <div class="layui-col-md3">
                <div class="head-logo">
                    <img src="/assets/images/master-logo2.png" id="logo">
                    <h1>模来模往加工系统</h1>
                </div>
                <div style="height:30vh;margin:2vh 0;" id="unitRank" class="wrap-background"></div>
                <div style="height:20vh;margin:2vh 0;" id="top3" class="wrap-background">
                    <p style="font-size: 18px;font-weight: 700;">合作单位TOP3</p>
                    <img src="~/user-resource/zhengli/logo1.png" />
                    <img src="~/user-resource/xufei/logo1.png" />
                    <img src="~/user-resource/richeng/logo1.png" />
                </div>
                <div style="height:30vh;margin:1vh 0;" id="taskMonth" class="wrap-background"></div>
            </div>
            <div class="layui-col-md6">
                <div class="mid-head">
                    <ul>
                        <li>
                            <p>93028</p>
                            <p>任务汇报总数</p>
                        </li>
                        <li>
                            <p>333601</p>
                            <p>流程提醒总数</p>
                        </li>
                        <li>
                            <p>2950万</p>
                            <p>交易总金额</p>
                        </li>
                    </ul>
                </div>

                <div id="container"></div>
                @*<div id="map">

                    </div>*@
                @*<p class="now-time">{{nowDate}}</p>*@
            </div>
            <div class="layui-col-md3">
                <div style="height:10vh"></div>
                <div style="height:30vh;margin:2vh 0;" id="QuarterChart" class="wrap-background"></div>
                <div style="height:50vh;margin:2vh 0;" id="reportMsg" class="wrap-background">
                    <div class="swiper-container">
                        <div class="swiper-wrapper">
                            <div class="swiper-slide" v-for="item,index in reportData" :key="item.id">
                                <div class="msg-wrap">
                                    <img class="logo" :src="item.headImgUrl" alt="person" />
                                    <div class="msg-text">
                                        <p>状态:<b>&nbsp;{{item.reportType}}</b></p>
                                        <p>时间:&nbsp;{{new Date(item.reportTime).pattern('MM/dd HH:mm')}}</p>
                                        <p>报工人:{{item.reporterName}}</p>
                                    </div>

                                    <img class="files" :src="getFilePath(item.files)+'?w=50'" v-if="item.files&&item.files.length" alt="files" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section scripts{
    <script type="text/javascript" src='//webapi.amap.com/maps?v=1.4.14&key=76912a14a34bfeb4f343f93908c089f8'></script>
    <!-- UI组件库 1.0 -->
    <script src="//webapi.amap.com/ui/1.0/main.js?v=1.0.11"></script>
    <script src="~/lib/echarts/echarts.js"></script>
    <script src="~/lib/swiper/swiper.min.js"></script>
    <script>
        config.ready = function () {
            $('.pace').remove();
        }
        const times = {
            unitRank: 3000,
            taskMonth: 5000,
            reportMsg: 2000,
            map: 2000,
            _mapSection: 10
        }
        const realData = {
            quarter: {
                task: [1339, 5339, 6873, 12222],
                report: [220, 831, 3427, 5070],
            }
        }
        const processTypesArr = ["数控铣", "深孔钻", "高速铣", "精雕"];
        //[, "电火花", "线切割", "高速精雕", "钻床", "磨床", "飞刀", "精飞", "镗床", "石墨精雕", "锯床", "激光焊", "中走丝", "慢走丝", "大型卧铣", "车床", "电炉", "调质", "电镀", "石墨", "抛光", "热处理", "氮化", "冲床", "模流分析", "热流道", "快速成型", "激光雕刻"];
        app = new Vue({
            el: '#app',
            data: {
                //nowDate: new Date().pattern('yyyy/MM/dd HH:mm:ss'),
                reportData: []
            },
            methods: {
                getFilePath: function (files) {
                    return files ? files[0].filePath : ''
                },
                setSwiper: function () {//初始化swiper
                    this.mySwiper = new Swiper('.swiper-container', {

                        slidesPerView: 3,//一页展示是3个
                        direction: 'vertical',//竖向排列
                        autoplay: true,//可选选项，自动滑动
                    })
                },
                getReportData: function () {
                    //一次先拿20条，
                    //用新获取的第一条数据的id去找reportData，如果已有就不是最新保工的数据，不改变
                    $.ajax('/api/services/app/processTaskReport/getPageResult', { limit: 100, page: 1 })
                    abp.services.app.processTaskReport.getPageResult({ limit: 20, page: 1 }, { abpHandleError: false }).done(res => {
                        var arr3 = [];
                        var arr2 = this.reportData,
                            arr1 = res.data;
                        for (var i in arr1) {
                            var shared = false;
                            for (var j in arr2)
                                if (arr2[j].id == arr1[i].id) {
                                    shared = true;
                                    break;
                                }
                            if (!shared) {
                                arr3.push(arr1[i])
                            }
                        }
                        this.reportData = arr3.concat(arr2);
                        if (arr3.length && this.mySwiper) {
                            //当有新数据进来并且它加载过了，则更新一下
                            Vue.nextTick(() => {
                                this.mySwiper.updateSlides();
                                this.mySwiper.slideTo(0, 1000, false);
                                this.mySwiper.autoplay.start();
                            })
                        }
                        if (!this.mySwiper) {
                            Vue.nextTick(this.setSwiper)
                        }
                        setTimeout(this.getReportData, times.reportMsg);

                    }).fail(err => {
                        setTimeout(this.getReportData, times.reportMsg);
                    })
                }
            },
            mounted: function () {
                this.getReportData();
            }
        });
        //QuarterChart
        (function setQuarter() {
            var QuarterChart = echarts.init(document.getElementById('QuarterChart'));
            var d = new Date();
            var quarterXAxis = function getQuarterXAxis() {
                function formatQ(y, q) {
                    switch (q) {
                        case '01':
                            q = '1'
                            break;
                        case '04':
                            q = '2'
                            break;
                        case '07':
                            q = '3'
                            break;
                        case '10':
                            q = '4'
                            break;
                    }
                    return `${y}-Q${q}`
                }
                var obj = {};
                obj.d4 = func.getHandleDate({ type: '本季' }).split(' | ')[0]
                for (var i = 3; i > 0; i--) {
                    var quarter = 'd' + i;
                    var startD = obj['d' + (i + 1)] ? new Date(obj['d' + (i + 1)]) : new Date();
                    obj[quarter] = func.getHandleDate({ type: '上季' }, startD).split(' | ')[0];
                }
                var arr = []
                var index = 0;
                for (i in obj) {
                    var splData = obj[i].split('-');
                    arr[index++] = formatQ(splData[0], splData[1]);
                }
                return arr.reverse();
            }();
            var option = {
                title: {
                    text: '任务趋势',
                    textStyle: { color: '#fff' }
                },
                tooltip: {//鼠标移上去显示toolbox
                    trigger: 'axis'
                },
                color: ['#01c4d9', '#015ed9'],
                legend: {
                    textStyle: { color: '#fff' },
                    data: ['任务总数', '报工总数']
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    data: quarterXAxis,
                    axisLine: {
                        lineStyle: {
                            color: '#eee'
                        }
                    }
                },
                yAxis: {
                    type: 'value',
                    nameTextStyle: {
                        color: '#fff',
                        fontSize: 16
                    },
                    axisLine: {
                        lineStyle: {
                            color: '#eee'
                        }
                    }
                },
                series: [
                    {
                        name: '任务总数',
                        type: 'line',
                        smooth: true,
                        stack: '总量',
                        itemStyle: {
                            borderWidth: 3,
                            //borderColor: '#01c4d9',
                        },
                        lineStyle: {
                            width: 3,
                            //color: '#01c4d9',
                        },
                        data: realData.quarter.task,

                    },
                    {
                        name: '报工总数',
                        type: 'line',
                        stack: '总量',
                        data: realData.quarter.report,
                        smooth: true,
                        itemStyle: {
                            borderWidth: 3,
                            //borderColor: '#015ed9',
                        },
                        lineStyle: {
                            width: 3,
                            //color: '#015ed9',
                        }
                    }
                ],
                textStyle: {
                    color: '#fff'
                }
            };
            QuarterChart.setOption(option);

        })();
        //unitRank
        (async function () {
            var tasks = [];
            const baseCount = 2;//一个任务应报工几次
            //$.ajax('/api/services/app/MESUnit/GetUnitRankReport', {})
            await abp.services.app.mESUnit.getUnitRankReport(null, null, null, { abpHandleError: false }).done(function (res) { tasks = res; })
            function pushReportRate(n) {
                return (n.reportCount / (n.taskCount * baseCount) * 100).toFixed(1)
            }
            var dataArrs = {
                taskCount: [],
                reportCount: [],
                reportRate: [],
                units: []
            }
            for (var i = 0; i < tasks.length; i++) {
                var n = tasks[i]
                dataArrs.taskCount.push(n['taskCount']);
                dataArrs.reportCount.push(n['reportCount']);
                dataArrs.reportRate.push(pushReportRate(n));
                dataArrs.units.push(n.unitName ? n.unitName.slice(0, 3) : '');
            }
            //var yAxisMax = function () {//y轴最大的值
            //
            //    var max = 0;
            //    tasks.forEach(function (n) {
            //        if (n.taskCount * baseCount > max) {
            //            max = n.taskCount * baseCount;
            //        }
            //    })
            //    max = max * 1.1;
            //    max = max - max % 10 + 10;
            //    return max
            //}();
            var myChart = echarts.init(document.getElementById('unitRank'));
            var option = {
                title: {
                    text: '外协实时排行',
                    textStyle: { color: '#fff' }
                },

                tooltip: {
                    trigger: 'axis',
                },
                color: ['#3e8deb', '#f3be70', '#8bffaf'],
                legend: {
                    textStyle: {
                        color: '#fff'
                    },
                    left: 'right',
                    data: ['应报工总数', '实际报工总数', { name: '报工率', icon: 'circle' }],
                },
                xAxis: [
                    {
                        type: 'category',
                        data: dataArrs.units,
                        axisPointer: {
                            type: 'shadow'
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#eee'
                            }
                        }
                    }
                ],
                yAxis: [
                    {
                        nameLocation: 'start',
                        type: 'value',
                        //name: '任务数',
                        nameTextStyle: {
                            color: '#fff',
                            fontSize: 16
                        },
                        axisLine: {
                            show: false,
                            lineStyle: {
                                color: '#eee'
                            }
                        },
                        nameGap: 25,
                    },
                    {
                        nameLocation: 'start',
                        show: false,
                        type: 'value',
                        name: '百分比',
                        nameTextStyle: {
                            color: '#fff',
                            fontSize: 16
                        },
                        min: 0,
                        max: 100,
                        interval: 20,
                        splitLine: { show: false },//去除网格线
                        axisLine: {
                            show: false,
                            lineStyle: {
                                color: '#eee'
                            }
                        }
                    }
                ],
            }
            myChart.setOption(option);
            function setSeries(startI, endI) {
                var xAxis = [
                    {
                        type: 'category',
                        data: dataArrs.units.slice(startI, endI),
                        axisPointer: {
                            type: 'shadow'
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#eee'
                            }
                        }
                    }
                ];
                var series = [
                    {
                        name: "应报工总数",
                        type: 'bar',
                        data: dataArrs.taskCount.slice(startI, endI),

                    },
                    {
                        name: '实际报工总数',
                        type: 'bar',
                        data: dataArrs.reportCount.slice(startI, endI),
                    },
                    {
                        type: 'line',
                        yAxisIndex: 1,
                        name: '报工率',
                        data: dataArrs.reportRate.slice(startI, endI),
                    }
                ]
                myChart.setOption({ xAxis: xAxis, series: series });
            }
            const NumPage = 5;
            var i = 0;
            const limit = Math.ceil(tasks.length / NumPage);
            setSeries(i * NumPage, (i + 1) * NumPage)
            setInterval(function () {
                ++i;
                if (i < limit - 1) {
                    //console.log('正常走')
                    setSeries(i * NumPage, (i + 1) * NumPage)

                } else if (i == limit - 1) {
                    //console.log('最后一个')
                    setSeries(tasks.length - NumPage, tasks.length)
                } else {
                    //console.log('重头开始')
                    i = 0;
                    setSeries(i * NumPage, (i + 1) * NumPage)
                }
            }, times.unitRank);
        })();
        //taskMonth
        (async function () {
            var taskMonth = echarts.init(document.getElementById('taskMonth'));
            var option = {
                tooltip: {
                    trigger: 'axis',
                },
                color: ['#3e8deb'],
                legend: {
                    textStyle: {
                        color: '#fff'
                    },
                    left: 'right',
                    data: ['任务数'],
                },
                xAxis: [
                    {
                        type: 'category',
                        data: ['19/06'],
                        axisPointer: {
                            type: 'shadow'
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#eee'
                            }
                        }
                    }
                ],
                yAxis: [
                    {
                        nameLocation: 'start',
                        type: 'value',
                        name: '任务数',
                        nameTextStyle: {
                            color: '#fff',
                            fontSize: 16
                        },
                        splitLine: { show: false },//去除网格线
                        nameGap: 25,
                        axisLine: {
                            //show: false,
                            lineStyle: {
                                color: '#eee'
                            }
                        }
                    }
                ],
            }
            taskMonth.setOption(option);


            var index = 0;
            async function getTaskData() {
                var monthXAxis = [];
                var seriesData = [];
                var type = processTypesArr[index];
                index < processTypesArr.length ? index++ : (index = 0)
                //$.ajax('/api/services/app/Report/GetTaskMonthReportByProcesTypeName', { processTypeName: type }
                await abp.services.app.report.getTaskMonthReportByProcesTypeName(type, { abpHandleError: false }).done(res => {
                    var hadDate = false;//当返回没有数据时，进行随机选择是否展示
                    res.forEach(el => {
                        if (el.taskCount) { hadDate = true; }
                        monthXAxis.unshift(new Date(el.year, el.month - 1).pattern('yy/MM'));
                        seriesData.unshift(el.taskCount)
                    })
                    if (!hadDate && Math.random() > 0.8) {
                        getTaskData();
                        return
                    }
                    setData();
                    setTimeout(getTaskData, times.taskMonth)
                })
                function setData() {
                    var optionData = {
                        title: {
                            text: type + '活跃度',
                            textStyle: { color: '#fff' }
                        },
                        xAxis: [
                            {
                                type: 'category',
                                data: monthXAxis,
                                axisPointer: {
                                    type: 'shadow'
                                },
                                axisLine: {
                                    lineStyle: {
                                        color: '#eee'
                                    }
                                }
                            }
                        ],
                        series: [{
                            name: "任务数",
                            data: seriesData,
                            type: 'line',
                            smooth: true,
                            stack: '总量',
                            itemStyle: {
                                borderWidth: 3,
                            },
                            lineStyle: {
                                width: 3,
                            }
                        }]
                    }
                    taskMonth.setOption(optionData);
                }
            }
            getTaskData()


        })();
        //map
        (function () {

        })()


                //创建地图
                var map = new AMap.Map('container', {
                    resizeEnable: true,
                    center: [121.24872, 28.655272],//地图中心点
                    //mapStyle: 'amap://styles/blue',
                    mapStyle: 'amap://styles/bc829ae4a3ab7540643274fbcc75d05b',
                    zoom: 10 //地图显示的缩放级别
                });
                //加载所有账套位置
                abp.services.app.mesTenancy.getAllTenantWithLocation().done(function (data) {
                    data.forEach(function (item, index) {
                        let marker = new AMap.Marker({
                            position: [item.lng, item.lat],
                            offset: new AMap.Pixel(-15, -15),
                            // '//a.amap.com/jsapi_demos/static/demo-center/icons/poi-marker-default.png',
                        });
                        map.add(marker);
                    })
                })
                //just some colors
                var colors = ['green', 'red',
                    "#3366cc", "#dc3912", "#ff9900", "#109618", "#990099", "#0099c6", "#dd4477", "#66aa00",
                    "#b82e2e", "#316395", "#994499", "#22aa99", "#aaaa11", "#6633cc", "#e67300", "#8b0707",
                    "#651067", "#329262", "#5574a6", "#3b3eac"
                ];

                function initPage(PointSimplifier, $) {

                    var pointSimplifierIns, groupStyleMap;

                    pointSimplifierIns = new PointSimplifier({
                        zIndex: 115,
                        //autoSetFitView: false,
                        map: map, //所属的地图实例

                        getPosition: function (item) {
                            //return [parseFloat(item.lat), parseFloat(item.lng)]
                            var lngLatLine = item.lngLatLine;

                            if (!lngLatLine) {
                                return null;
                            }

                            var parts = lngLatLine.split(',');

                            return [parseFloat(parts[0]), parseFloat(parts[1])];
                        },
                        getHoverTitle: function (dataItem, idx) {
                            return '序号: ' + idx;
                        },
                        //使用GroupStyleRender
                        renderConstructor: PointSimplifier.Render.Canvas.GroupStyleRender,
                        renderOptions: {
                            //点的样式
                            pointStyle: {
                                width: 5,
                                height: 5,
                                fillStyle: '#A2D0FA'
                            },
                            getGroupId: function (item, idx) {

                                return item.groupId;
                            },
                            groupStyleOptions: function (gid) {

                                //return {
                                //    pointStyle: {
                                //        fillStyle: colors[gid % colors.length]
                                //    }
                                //};
                                return groupStyleMap[gid];
                            }

                        }
                    });

                    function onIconLoad() {
                        pointSimplifierIns.renderLater();
                    }

                    function onIconError(e) {
                        alert('图片加载失败！');
                    }

                    groupStyleMap = {
                        '0': {
                            pointStyle: {
                                //宽度
                                width: 10,
                                //高度
                                height: 10,
                                fillStyle: colors[0 % colors.length],
                                //strokeStyle: null
                            }
                        },
                        '1': {
                            pointStyle: {
                                //宽度
                                width: 16,
                                //高度
                                height: 16,
                                fillStyle: colors[1 % colors.length],
                                // strokeStyle: null
                            }
                        },
                    };
                    function startAnim() {

                        var renderOptions = pointSimplifierIns.getRenderOptions();

                        //获得pointStyle
                        var pointStyle = renderOptions.pointStyle;
                        var groupStyleOptions = renderOptions.groupStyleOptions;

                        var size = pointStyle.width,
                            range = [10, 35],
                            step = size < range[1] ? 1 : -1;
                        //pointSimplifierIns.getRender().getLayer().set('alwaysRender', true);

                        function anim() {

                            size += step;
                            groupStyleMap = {
                                '0': {
                                    pointStyle: {
                                        //宽度
                                        width: 10,
                                        //高度
                                        height: 10,
                                        fillStyle: colors[0 % colors.length],
                                        //strokeStyle: null
                                    }
                                },
                                '1': {
                                    pointStyle: {
                                        //宽度
                                        width: size,
                                        //高度
                                        height: size,
                                        fillStyle: colors[1 % colors.length],
                                        // strokeStyle: null
                                    }
                                },
                            };
                            //修改pointStyle
                            //pointStyle.width = pointStyle.height = size;

                            //重新绘制
                            pointSimplifierIns.render();

                            if (size >= range[1]) {
                                step = -1;
                            } else if (size <= range[0]) {
                                step = 1;
                            }

                            //window.requestAnimationFrame(anim);
                            //
                            setTimeout(anim, 30);
                        }

                        anim();
                    }
                    var start = new Date(new Date().getTime() - times._mapSection * 24 * 60 * 60 * 1000).pattern('yyyy-MM-dd HH:mm:ss')
                    function getData() {
                        var end = new Date().pattern('yyyy-MM-dd HH:mm:ss');
                        abp.services.app.report.getReportLocation(start, end, { abpHandleError: false }).done(res => {
                            var data = [];
                            for (var i = 0, len = res.length; i < len; i++) {
                                data.push({
                                    lngLatLine: res[i].lng + ',' + res[i].lat,
                                    groupId: len - 3 <= i ? 1 : 0//取最后三个为第一组
                                });
                            }
                            pointSimplifierIns.setData(data);
                            setTimeout(getData, times.map);
                        })
                    }
                    getData();
                    startAnim();
                }

                AMapUI.load(['ui/misc/PointSimplifier', 'lib/$'], function (PointSimplifier, $) {

                    if (!PointSimplifier.supportCanvas) {
                        alert('当前环境不支持 Canvas！');
                        return;
                    }

                    initPage(PointSimplifier, $);
                });
    </script>
}