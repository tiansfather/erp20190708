@using Master.Web.Components
@using Master.Module
@inherits MasterRazorPage<TModel>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Master.Web.Core
@model BaseTreeViewParam
@{

}

	<div class="LAY-app-message-btns" style="margin-bottom: 10px;">
		@if (Model.EnableAdd || Model.EnableEdit || Model.EnableDelete)
		{
			<div class="layui-btn-group">
				@if (Model.EnableAdd)
				{
					<button class="layui-btn layui-btn-sm" onclick="baseTree.doAdd()">
						<i class="layui-icon">&#xe654;</i>
					</button>
				}
				@if (Model.EnableEdit)
				{
					<button class="layui-btn layui-btn-sm" onclick="baseTree.doEdit()">
						<i class="layui-icon">&#xe642;</i>
					</button>
				}
				@if (Model.EnableDelete)
				{
					<button class="layui-btn layui-btn-sm layui-btn-danger" onclick="baseTree.doDel()">
						<i class="layui-icon">&#xe640;</i>
					</button>
				}

			</div>
		}
		@if (Model.EnableSearch)
		{
			<input type="text" name="treeKeyword" placeholder="请输入关键字" autocomplete="off" class="layui-input" onkeyup="baseTree.doSearch()">
		}

	</div>
<ul id="baseTree" class="ztree"
	style="padding: 2px; border: 1px solid #ddd; overflow: auto;"></ul>
<script src="/lib/zTree/js/jquery.ztree.exhide.js"></script>
<script>
    var zTreeObj;
    var baseTree = function () {

		//var zTreeObj;
		var setting = {
			view: { selectedMulti: false },
			data: {
				key: {
					name: 'displayName',
					title: 'displayName'
				},
				simpleData: {
					enable: true,
					idKey: 'id',
					pIdKey: 'parentId',
					rootPId: 'null'
				}
			},
			callback: {
				onClick: function (event, treeId, treeNode) {
					baseTree.node = treeNode;
					baseTree.onSelect(treeNode);
					//config.reloadTable();
				}
			}
		};
        var load = function () {
            var showInner=@Model.ShowInner;
			abp.services.app.baseTree.getTreeJson('@Model.TreeKey', null).done(function (json) {
				zTreeObj = $.fn.zTree.init($("#baseTree"), setting);
				var newNode = { displayName: "@Html.Raw(Model.TreeName)", id: null, parentId: "" };
                //json.push(newNode);
                if (!showInner) {
                    json = json.filter(function (o) { return o.nature == 0; });//只显示对外
                }
                //json.push({ displayName: '未分类', id: -1, parentId: null });
				zTreeObj.addNodes(null, json);
				//mainList({ orgId: "" });
				zTreeObj.expandAll(true);
			});
			//$.getJSON(url, function (json) {
			//    zTreeObj = $.fn.zTree.init($("#tree"), setting);
			//    var newNode = { Name: "根节点", Id: null, ParentId: "" };
			//    json.push(newNode);
			//    zTreeObj.addNodes(null, json);
			//    //mainList({ orgId: "" });
			//    zTreeObj.expandAll(true);
			//});
		};
		load();
		return {
			node: {},
			reload: load,
			onSelect: function () {},
			doAdd: function () {
				layer.open({
					type: 2,
					title: "添加分类",
					shadeClose: false,
					shade: 0.8,
					area: ['80%', '80%'],
                    content: "/BaseTree/Add?treeKey=@Model.TreeKey&parentId=" + (baseTree.node.id ? (baseTree.node.id == -1 ? "" : baseTree.node.id):""),
					btn: ['提交', '关闭'],
					btnAlign: 'l',
					yes: function (index, layero) {
						var iframeWin = window[layero.find('iframe')[0]['name']]; //得到iframe页的窗口对象，执行iframe页的方法：iframeWin.method();
						if (iframeWin.submit) { iframeWin.submit(); return false; }
					}
				})
			},
			doEdit: function () {
				if (!baseTree.node.id) {
					layer.msg(L("请先选择分类节点"), { icon: 5, anim: 6 });
					return false;
				} else {
					layer.open({
					type: 2,
					title: "编辑分类",
					shadeClose: false,
					shade: 0.8,
					area: ['80%', '80%'],
					content: "/BaseTree/Edit?id=" +( baseTree.node.id ),
					btn: ['提交', '关闭'],
					btnAlign: 'l',
					yes: function (index, layero) {
						var iframeWin = window[layero.find('iframe')[0]['name']]; //得到iframe页的窗口对象，执行iframe页的方法：iframeWin.method();
						if (iframeWin.submit) { iframeWin.submit(); return false; }
					}
				})
				}
			},
			doDel: function () {
				if (!baseTree.node.id) {
					layer.msg(L("请先选择分类节点"), { icon: 5, anim: 6 });
					return false;
				} else {
					abp.message.confirm(L("确认删除此分类节点?相应子节点也将被删除"), function () {
						func.runAsync(abp.services.app.baseTree.deleteEntity([baseTree.node.id]).done(function () {
							baseTree.reload();
						}));
					})
				}
            },
            doSearch: function () {
				var nodes=zTreeObj.getNodes();
                var keyword = $("input[name='treeKeyword']").val();
				zTreeObj.showNodes(zTreeObj.getNodesByParam("isHidden", true));
                if (keyword) {
                    zTreeObj.hideNodes(nodes.filter(function (o) { return o.displayName.indexOf(keyword) < 0 }));
                } 
            }
		}
	}();
</script>